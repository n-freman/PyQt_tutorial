
<!doctype html>
<html lang="en">
<head>
<link href="https://cdn.realpython.com" rel="preconnect">
<link href="https://files.realpython.com" rel="preconnect">
<title>PyQt Layouts: Create Professional-Looking GUI Applications – Real Python</title>
<meta name="author" content="Real Python">
<meta name="description" content="In this step-by-step tutorial, you’ll learn how to use PyQt layouts to arrange and manage the graphical components on your GUI applications. With the help of PyQt&#x27;s layout managers, you&#x27;ll be able to create polished and professional GUIs with minimal effort.">
<meta name="keywords" content="">
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover">
<link rel="stylesheet" href="https://cdn.realpython.com/static/realpython.min.9bf315f11a8c.css">
<link rel="stylesheet" href="https://cdn.realpython.com/static/gfonts/font.5ac42994de49.css">
<link rel="preload" href="https://cdn.realpython.com/static/glightbox.min.f69035b3cab2.css" as="style" onload="this.onload=null;this.rel='stylesheet'"><noscript><link rel="stylesheet" href="https://cdn.realpython.com/static/glightbox.min.f69035b3cab2.css"></noscript>
<link rel="canonical" href="https://realpython.com/python-pyqt-layout/">
<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:image" content="https://files.realpython.com/media/PyQt-Layout-Management_Watermarked.6403529c8a61.jpg">
<meta property="og:image" content="https://files.realpython.com/media/PyQt-Layout-Management_Watermarked.6403529c8a61.jpg">
<meta name="twitter:creator" content="@realpython">
<meta name="twitter:site" content="@realpython">
<meta property="og:title" content="PyQt Layouts: Create Professional-Looking GUI Applications – Real Python">
<meta property="og:type" content="article">
<meta property="og:url" content="https://realpython.com/python-pyqt-layout/">
<meta property="og:description" content="In this step-by-step tutorial, you’ll learn how to use PyQt layouts to arrange and manage the graphical components on your GUI applications. With the help of PyQt&#x27;s layout managers, you&#x27;ll be able to create polished and professional GUIs with minimal effort.">
<link href="https://cdn.realpython.com/static/favicon.68cbf4197b0c.png" rel="icon">
<link href="https://realpython.com/atom.xml" rel="alternate" title="Real Python" type="application/atom+xml">
<link rel="manifest" href="/manifest.json">
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-35184939-1', 'auto', {'allowLinker': true});

  

  

  
  
  ga('set', {
    dimension1: false,
    dimension2: false
  });
  

  ga('send', 'pageview');
  
</script>
</head>
<body>
<nav class="navbar fixed-top navbar-expand-lg navbar-dark flex-column ">
<div class="container flex-row">
<a class="navbar-brand" href="/">
<img src="https://cdn.realpython.com/static/real-python-logo.893c30edea53.svg" width="165" height="40" class="d-inline-block align-top" alt="Real Python">
</a>
<button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
<span class="navbar-toggler-icon"></span>
</button>
<div class="collapse navbar-collapse navbar-nav-scroll" id="navbarSupportedContent" role="navigation" aria-label="Main Navigation">
<ul class="navbar-nav mr-2">
<li class="nav-item">
<a class="nav-link" href="/start-here/">Start&nbsp;Here</a>
</li>
<li class="nav-item dropdown">
<a class="nav-link dropdown-toggle" href="#" id="navbarDropdownLibrary" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
<span class="fa fa-graduation-cap" aria-hidden="true"></span> Learn Python
</a>
<div class="dropdown-menu" aria-labelledby="navbarDropdownLibrary">
<a class="dropdown-item" href="/search?kind=article&kind=course&order=newest" style="color: #ff7e73; line-height: 110%;"><i class="fa fa-fw mr-1 fa-graduation-cap" aria-hidden="true"></i> Python Tutorials →<br><small class="text-secondary">In-depth articles and video courses</small></a>
<a class="dropdown-item" href="/learning-paths/" style="color: #ffc873; line-height: 110%;"><i class="fa fa-fw mr-1 fa-map-o" aria-hidden="true"></i> Learning Paths →<br><small class="text-secondary">Guided study plans for accelerated learning</small></a>
<a class="dropdown-item" href="/quizzes/" style="color: #abe0e5; line-height: 110%;"><i class="fa fa-fw mr-1 fa-trophy" aria-hidden="true"></i> Quizzes →<br><small class="text-secondary">Check your learning progress</small></a>
<a class="dropdown-item" href="/tutorials/all/" style="color: #ccc; line-height: 110%;"><i class="fa fa-fw mr-1 fa-tags" aria-hidden="true"></i> Browse Topics →<br><small class="text-secondary">Focus on a specific area or skill level</small></a>
<a class="dropdown-item" href="/community/" style="color: #e5c6ab; line-height: 110%;"><i class="fa fa-fw mr-1 fa-slack" aria-hidden="true"></i> Community Chat →<br><small class="text-secondary">Learn with other Pythonistas</small></a>
<a class="dropdown-item" href="/office-hours/" style="color: #e5c6ab; line-height: 110%;"><i class="fa fa-fw mr-1 fa-users" aria-hidden="true"></i> Office Hours →<br><small class="text-secondary">Live Q&A calls with Python experts</small></a>
<a class="dropdown-item" href="/podcasts/rpp/" style="color: #b8abe5; line-height: 110%;"><i class="fa fa-fw mr-1 fa-podcast" aria-hidden="true"></i> Podcast →<br><small class="text-secondary">Hear what’s new in the world of Python</small></a>
<a class="dropdown-item pb-3" href="/products/books/" style="color: #abe5b1; line-height: 110%;"><i class="fa fa-fw mr-1 fa-book" aria-hidden="true"></i> Books →<br><small class="text-secondary">Round out your knowledge and learn offline</small></a>
<a class="dropdown-item border-top text-warning" href="/account/join/"><i class="fa fa-fw fa-star text-warning" aria-hidden="true"></i> Unlock All Content →</a>
</div>
</li>
<li class="nav-item dropdown">
<a class="nav-link dropdown-toggle" href="#" id="navbarDropdownMore" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
More
</a>
<div class="dropdown-menu" aria-labelledby="navbarDropdownMore">
<a class="dropdown-item" href="/products/">Python Learning Resources</a>
<a class="dropdown-item" href="/newsletter/">Python Newsletter</a>
<a class="dropdown-item" href="https://www.pythonjobshq.com" target="_blank">Python Job Board</a>
<a class="dropdown-item" href="/team/">Meet the Team</a>
<a class="dropdown-item" href="/write-for-us/">Become a Tutorial Author</a>
<a class="dropdown-item" href="/become-an-instructor/">Become a Video Instructor</a>
</div>
</li>
</ul>
<div class="d-block d-lg-none">
<ul class="navbar-nav">
<li class="nav-item">
<a class="nav-link" href="/search" title="Search"><span class="d-block d-lg-none"><i class="fa fa-search" aria-hidden="true"></i> Search</span><span class="d-none d-lg-block"><i class="fa fa-search" aria-hidden="true"></i></span></a>
</li>
</ul>
</div>
<div class="d-none d-lg-flex align-items-center mr-2 flex-fill">
<form class="form-inline w-100" action="/search" method="GET">
<a class="js-search-form-submit position-absolute" href="/search" title="Search"><i class="fa fa-search fa-fw text-muted pl-2" aria-hidden="true"></i></a>
<input class="search-field form-control form-control-md mr-sm-1 mr-lg-2 w-100" style="padding-left: 2rem;" maxlength=50 type="search" placeholder="Search" aria-label="Search" name="q">
<input type="hidden" name="_from" value="nav">
</form>
</div>
<ul class="navbar-nav ml-auto">
<li class="nav-item form-inline">
<a class="ml-2 ml-lg-0 btn btn-sm btn-primary px-3" href="/account/join/">Join</a>
</li>
<li class="nav-item">
<a class="btn text-light" href="/account/login/?next=%2Fpython-pyqt-layout%2F">Sign&#8209;In</a>
</li>
</ul>
</div>
</div>
</nav>
<div class="container main-content">
<div class="row justify-content-center">
<div class="col-md-11 col-lg-8 article with-headerlinks">
<figure class="embed-responsive embed-responsive-16by9">
<img class="card-img-top m-0 p-0 embed-responsive-item rounded" style="object-fit: contain;" alt="PyQt Layouts: Create Professional-Looking GUI Applications" src="https://files.realpython.com/media/PyQt-Layout-Management_Watermarked.6403529c8a61.jpg" width="1920" height="1080" srcset="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/PyQt-Layout-Management_Watermarked.6403529c8a61.jpg&amp;w=480&amp;sig=e89b81b98530a247f95d274cd23e0b0d4f0810af 480w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/PyQt-Layout-Management_Watermarked.6403529c8a61.jpg&amp;w=960&amp;sig=05eced4876fb430e9e8797a6226b8c34bbc78891 960w, https://files.realpython.com/media/PyQt-Layout-Management_Watermarked.6403529c8a61.jpg 1920w" sizes="75vw">
</figure>
<h1>PyQt Layouts: Create Professional-Looking GUI Applications</h1>
<div class="mb-0">
<span class="text-muted">by <a class="text-muted" href="#author">Leodanis Pozo Ramos</a>
<span class="ml-2 mr-1 fa fa-comments"></span><a class="text-muted" href="#reader-comments"><span class="disqus-comment-count" data-disqus-identifier="https://realpython.com/python-pyqt-layout/"></span></a>
<span class="ml-2 fa fa-tags" aria-hidden="true"></span>
<a href="/tutorials/gui/" class="badge badge-light text-muted">gui</a>
<a href="/tutorials/intermediate/" class="badge badge-light text-muted">intermediate</a>
<div class="d-sm-flex flex-row justify-content-between my-3 text-center">
<div class="jsCompletionStatusWidget btn-group mb-0">
<button title="Click to mark as completed" class="jsBtnCompletion btn btn-secondary border-right " style="border-top-right-radius: 0; border-bottom-right-radius: 0;" disabled>Mark as Completed</button>
<button title="Add bookmark" class="jsBtnBookmark btn btn-secondary border-left" disabled><i class="fa fa-fw fa-bookmark-o"></i></button>
</div>
<div class="align-self-center my-2">
<span>
<a target="_blank" rel="nofollow" href="https://twitter.com/intent/tweet/?text=Check out this %23Python tutorial: PyQt%20Layouts%3A%20Create%20Professional-Looking%20GUI%20Applications by @realpython&url=https%3A//realpython.com/python-pyqt-layout/" class="mr-1 badge badge-twitter text-light mb-1"><i class="mr-1 fa fa-twitter text-light"></i>Tweet</a>
<a target="_blank" rel="nofollow" href="https://facebook.com/sharer/sharer.php?u=https%3A//realpython.com/python-pyqt-layout/" class="mr-1 badge badge-facebook text-light mb-1"><i class="mr-1 fa fa-facebook text-light"></i>Share</a>
<a target="_blank" rel="nofollow" href="mailto:?subject=Python article for you&body=Check out this Python tutorial:%0A%0APyQt%20Layouts%3A%20Create%20Professional-Looking%20GUI%20Applications%0A%0Ahttps%3A//realpython.com/python-pyqt-layout/" class="badge badge-red text-light mb-1"><i class="mr-1 fa fa-envelope text-light"></i>Email</a>
</span>
</div>
</div>
</div>
<div class="article-body">
<div class="bg-light sidebar-module sidebar-module-inset" id="toc">
<p class="h3 mb-2 text-muted">Table of Contents</p>
<div class="toc">
<ul>
<li><a href="#laying-out-graphical-elements-on-a-gui">Laying Out Graphical Elements on a GUI</a></li>
<li><a href="#getting-stocked-with-a-gallery-of-pyqt-layouts">Getting Stocked With a Gallery of PyQt Layouts</a></li>
<li><a href="#using-general-purpose-layout-managers">Using General-Purpose Layout Managers</a><ul>
<li><a href="#building-horizontal-layouts-qhboxlayout">Building Horizontal Layouts: QHBoxLayout</a></li>
<li><a href="#building-vertical-layouts-qvboxlayout">Building Vertical Layouts: QVBoxLayout</a></li>
<li><a href="#arranging-widgets-in-a-grid-qgridlayout">Arranging Widgets in a Grid: QGridLayout</a></li>
<li><a href="#creating-forms-quickly-qformlayout">Creating Forms Quickly: QFormLayout</a></li>
</ul>
</li>
<li><a href="#nesting-layouts-to-build-complex-guis">Nesting Layouts to Build Complex GUIs</a></li>
<li><a href="#using-multipage-layouts-and-widgets">Using Multipage Layouts and Widgets</a><ul>
<li><a href="#creating-a-stack-of-widgets">Creating a Stack of Widgets</a></li>
<li><a href="#using-pyqts-tab-widgets">Using PyQt&rsquo;s Tab Widgets</a></li>
</ul>
</li>
<li><a href="#laying-out-the-applications-main-window">Laying Out the Application&rsquo;s Main Window</a></li>
<li><a href="#laying-out-the-applications-dialogs">Laying Out the Application&rsquo;s Dialogs</a></li>
<li><a href="#managing-space-in-a-pyqt-layout">Managing Space in a PyQt Layout</a><ul>
<li><a href="#managing-space-in-box-layouts">Managing Space in Box Layouts</a></li>
<li><a href="#managing-space-in-grid-and-form-layouts">Managing Space in Grid and Form Layouts</a></li>
</ul>
</li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>
</div>
</div>
<div class="sidebar-module sidebar-module-inset p-0" style="overflow:hidden;">
<div style="display:block;position:relative;">
<div style="display:block;width:100%;padding-top:12.5%;"></div>
<div class="rpad rounded border" data-unit="8x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"></div>
</div>
<a class="small text-muted" href="/account/join/" rel="nofollow"> <i class="fa fa-info-circle" aria-hidden="true"> </i> Remove ads</a>
</div>
<div class="border rounded p-3 card mb-2">
<p class="mb-0"><span class="badge badge-pill badge-success"><i class="fa fa-play-circle" aria-hidden="true"></i> Watch Now</span> This tutorial has a related video course created by the Real Python team. Watch it together with the written tutorial to deepen your understanding: <a class="stretched-link text-success" href="/courses/creating-pyqt-layouts-gui-applications/"><strong>Creating PyQt Layouts for GUI Applications</strong></a></p>
</div>
<p>PyQt&rsquo;s <a href="https://doc.qt.io/qt-5/layout.html">layout managers</a> provide a user-friendly and productive way of arranging graphical components, or <strong>widgets</strong>, on a GUI. Laying out widgets properly will make your <a href="https://realpython.com/learning-paths/python-gui-programming/">GUI applications</a> look polished and professional. Learning to do so efficiently and effectively is a fundamental skill for you to get up and running with GUI application development using Python and PyQt.</p>
<p><strong>In this tutorial, you&rsquo;ll learn:</strong></p>
<ul>
<li>What the benefits are of using PyQt&rsquo;s <strong>layout managers</strong> </li>
<li>How to programmatically <strong>lay out widgets</strong> on a GUI using PyQt&rsquo;s layout managers </li>
<li>How to <strong>select the right layout manager</strong> for your GUI application</li>
<li>How to lay out widgets in <strong>main window&ndash;based</strong> and <strong>dialog-based</strong> applications</li>
</ul>
<p>With this knowledge and skillset, you&rsquo;ll be able to use Python and PyQt to create professional-looking GUI applications.</p>
<p>For a better understanding of how to use layout managers, some previous knowledge of how to create <a href="https://realpython.com/python-pyqt-gui-calculator/">PyQt GUI applications</a> and how to work with <a href="https://doc.qt.io/qt-5/qwidget.html">PyQt widgets</a> would be helpful.</p>
<div class="alert alert-warning" role="alert">
<p><strong markdown="1">Free Bonus:</strong> <a href="https://realpython.com/bonus/python-mastery-course/" class="alert-link" data-toggle="modal" data-target="#modal-python-mastery-course" data-focus="false" markdown="1">5 Thoughts On Python Mastery</a>, a free course for Python developers that shows you the roadmap and the mindset you&rsquo;ll need to take your Python skills to the next level.</p>
</div>
<section class="section2" id="laying-out-graphical-elements-on-a-gui"><h2>Laying Out Graphical Elements on a GUI<a class="headerlink" href="#laying-out-graphical-elements-on-a-gui" title="Permanent link"></a></h2>
<p>When you&rsquo;re creating <a href="https://en.wikipedia.org/wiki/Graphical_user_interface">graphical user interface (GUI)</a> applications, a common issue is how to get your graphical components&mdash;<a href="https://en.wikipedia.org/wiki/Button_(computing)">buttons</a>, <a href="https://realpython.com/python-menus-toolbars/">menus, toolbars</a>, <a href="https://en.wikipedia.org/wiki/Label_(control)">labels</a>, and so on&mdash;laid out coherently on your forms and <a href="https://en.wikipedia.org/wiki/Window_(computing)">windows</a>. This process is known as <strong>GUI layout</strong>, and it&rsquo;s an important step in creating GUI applications.</p>
<p>In the past, if you wanted to lay out graphical components, or <a href="https://en.wikipedia.org/wiki/Software_widget">widgets</a>, on a window, then you would follow one of the following approaches:</p>
<ol>
<li>Decide on and manually set a static size and position for each widget on the window.</li>
<li>Calculate and set the size and position of each widget dynamically.</li>
</ol>
<p>The first approach is fairly direct, but it has at least the following drawbacks:</p>
<ul>
<li>Your windows will be <strong>non-resizable</strong>, which might cause problems when displaying them on different screen resolutions.</li>
<li>Your labels might not support <strong>localization</strong> properly because the length of a given text changes between languages.</li>
<li>Your widgets will display differently on different platforms, which makes it difficult to write <strong>multiplatform</strong> applications that look good.</li>
</ul>
<p>The second approach is more flexible. However, it also has drawbacks:</p>
<ul>
<li>You have to do a lot of manual calculations to determine the right <strong>size</strong> and <strong>position</strong> of each widget.</li>
<li>You have to do some extra calculations to respond correctly to <strong>window resizing</strong>.</li>
<li>You have to redo all the calculations any time you <strong>modify the layout</strong> of your window.</li>
</ul>
<p>Even though you can still use either of these two approaches to lay out your GUIs, most of the time you&rsquo;ll want to use a third and more convenient approach implemented by most modern <a href="https://en.wikipedia.org/wiki/Widget_toolkit">GUI frameworks or toolkits</a>: layout managers.</p>
<div class="alert alert-primary" role="alert">
<p><strong>Note:</strong> In some GUI frameworks, such as <a href="https://realpython.com/python-gui-tkinter/">Tkinter</a>, layout managers are also referred to as <strong>geometry managers</strong>.</p>
</div>
<p><a href="https://en.wikipedia.org/wiki/Layout_manager">Layout managers</a> automatically arrange widgets on a GUI according to your specific needs. They avoid the compatibility drawbacks of the first approach as well as the annoying and complicated calculations of the second approach.</p>
<p>In the following sections, you&rsquo;ll learn about PyQt&rsquo;s built-in layout managers and how to use them to effectively lay out the graphical components of your GUI applications.</p>
<div><div class="rounded border border-light" style="display:block;position:relative;"><div style="display:block;width:100%;padding-top:12.5%;"></div><div class="rpad rounded border" data-unit="8x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"></div></div><a class="small text-muted" href="/account/join/" rel="nofollow"><i aria-hidden="true" class="fa fa-info-circle"> </i> Remove ads</a></div></section><section class="section2" id="getting-stocked-with-a-gallery-of-pyqt-layouts"><h2>Getting Stocked With a Gallery of PyQt Layouts<a class="headerlink" href="#getting-stocked-with-a-gallery-of-pyqt-layouts" title="Permanent link"></a></h2>
<p>In PyQt, widgets are graphical components that you use as building blocks for your GUI applications. When you place a bunch of widgets on a window to create a GUI, you need to give them some order. You need to set the widgets&rsquo; size and position on the window, and you also need to define their behavior for when the user resizes the underlying window.</p>
<div class="alert alert-primary" role="alert">
<p><strong>Note:</strong> Unfortunately, PyQt5&rsquo;s <a href="https://www.riverbankcomputing.com/static/Docs/PyQt5/index.html">official documentation</a> has some incomplete sections. To work around this, you can check out the <a href="https://www.riverbankcomputing.com/static/Docs/PyQt4/">PyQt4 documentation</a>, the <a href="https://doc.qt.io/qtforpython/">Qt for Python documentation</a>, or the original <a href="https://doc.qt.io/">Qt documentation</a>.</p>
<p>In this tutorial, you&rsquo;ll find that most links will take you to the original Qt documentation, which is a better source of information in most cases.</p>
</div>
<p>To arrange the widgets on windows or forms in PyQt, you can use the following techniques:</p>
<ul>
<li>Use <code>.resize()</code> and <code>.move()</code> on your widgets to provide an absolute size and position.</li>
<li>Reimplement <code>.resizeEvent()</code> and calculate your widgets&rsquo; size and position dynamically.</li>
<li>Use layout managers and let them do all the calculations and hard work for you.</li>
</ul>
<p>These techniques generally correspond to the three different approaches for laying out a GUI that you saw in the previous section.</p>
<p>Again, calculating the size and position dynamically might be a good approach, but most of the time you&rsquo;ll be better off using <a href="https://doc.qt.io/qt-5/layout.html">layout managers</a>. In PyQt, layout managers are classes that provide the required functionality to automatically manage the size, position, and resizing behavior of the widgets in the layout.</p>
<p>With layout managers, you can automatically arrange <strong>child</strong> widgets within any <strong>parent</strong>, or container, widget. Using layout managers will ensure that you make good use of the available space on your GUI and also that your application remains usable when the user resizes the window.</p>
<p>Layout managers work as containers for both widgets and other layouts. To add widgets to a layout manager, you call <a href="https://doc.qt.io/qt-5/qlayout.html#addWidget"><code>.addWidget()</code></a> on the layout at hand. To add a layout to another layout, you call <code>.addLayout()</code> on the layout at hand. You&rsquo;ll dive deeper into nesting layouts in the section <a href="https://realpython.com/python-pyqt-layout/#nesting-layouts-to-build-complex-guis">Nesting Layouts to Build Complex GUIs</a>.</p>
<p>Once you&rsquo;ve added all the required widgets to a layout manager, you set the layout manager on a given widget using <a href="https://doc.qt.io/qt-5/qwidget.html#setLayout"><code>.setLayout()</code></a>. You can set a layout manager on any subclasses of <a href="https://doc.qt.io/qt-5/qwidget.html"><code>QWidget</code></a>, including windows or forms.</p>
<div class="alert alert-primary" role="alert">
<p><strong>Note:</strong> <a href="https://doc.qt.io/qt-5/qmainwindow.html"><code>QMainWindow</code></a> is a PyQt class that you can use to create <a href="https://realpython.com/python-pyqt-gui-calculator/#main-windows">main widow&ndash;style applications</a>. This class has its own <a href="https://realpython.com/python-pyqt-layout/#laying-out-the-applications-main-window">built-in layout manager</a>. So, if you&rsquo;re using <code>QMainWindow</code>, then you commonly won&rsquo;t need to set a layout manager on your main window objects.</p>
</div>
<p>All the widgets in a layout are automatically set as children of the widget on which you install the layout, not of the layout itself. That&rsquo;s because widgets can have only other widgets, not layouts, as their parent.</p>
<p>PyQt&rsquo;s layout managers provide some cool features that make your life a lot easier when it comes to creating good-looking GUI applications:</p>
<ul>
<li>Handling the <strong>size</strong> and <strong>position</strong> of widgets without the need for any calculation</li>
<li>Handling the <strong>resizing</strong> and <strong>repositioning</strong> of widget when the user resizes the underlying window</li>
<li>Resizing labels to better support <strong>internationalization</strong></li>
<li>Providing a native window layout for <strong>multiplatform</strong> applications</li>
</ul>
<p>Using layout managers will also dramatically increase your productivity and improve your code&rsquo;s maintainability in the long term.</p>
<p>PyQt provides four general-purpose layout manager classes:</p>
<ol>
<li><a href="https://doc.qt.io/qt-5/qhboxlayout.html"><code>QHBoxLayout</code></a> arranges widgets in a horizontal box.</li>
<li><a href="https://doc.qt.io/qt-5/qvboxlayout.html"><code>QVBoxLayout</code></a> arranges widgets in a vertical box.</li>
<li><a href="https://doc.qt.io/qt-5/qgridlayout.html"><code>QGridLayout</code></a> arranges widgets in a grid.</li>
<li><a href="https://doc.qt.io/qt-5/qformlayout.html"><code>QFormLayout</code></a> arranges widgets in two columns.</li>
</ol>
<p>In the next few sections, you&rsquo;ll learn the basics of how to use these general-purpose layout managers.</p>
</section><section class="section2" id="using-general-purpose-layout-managers"><h2>Using General-Purpose Layout Managers<a class="headerlink" href="#using-general-purpose-layout-managers" title="Permanent link"></a></h2>
<p>When creating GUI applications with PyQt, you&rsquo;ll often use one or more of the four general-purpose layouts that you saw at the end of the previous section to get your widget laid out on your windows and forms.</p>
<p>In the next few sections, you&rsquo;ll learn how to create and use the four general-purpose layout managers with the help of some examples.</p>
<div><div class="rounded border border-light" style="display:block;position:relative;"><div style="display:block;width:100%;padding-top:12.5%;"></div><div class="rpad rounded border" data-unit="8x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"></div></div><a class="small text-muted" href="/account/join/" rel="nofollow"><i aria-hidden="true" class="fa fa-info-circle"> </i> Remove ads</a></div><section class="section3" id="building-horizontal-layouts-qhboxlayout"><h3>Building Horizontal Layouts: <code>QHBoxLayout</code><a class="headerlink" href="#building-horizontal-layouts-qhboxlayout" title="Permanent link"></a></h3>
<p><strong>Box layout managers</strong> take the space they get from their parent layout or widget, divide it up into a number of boxes, or <strong>cells</strong>, and make each widget in the layout fill one box.</p>
<p><strong><code>QHBoxLayout</code></strong> is one of the two available box layouts in PyQt. This layout manager allows you to arrange widgets <strong>horizontally</strong>, one next to the other. The widgets are added to the layout from left to right. This means that the widget that you add first in your code will be the left-most widget in the layout.</p>
<p>To add widgets to a <code>QHBoxLayout</code> object, you call <code>.addWidget(widget, stretch, alignment)</code> on the layout object. This method takes one required argument and two optional arguments:</p>
<ol>
<li>
<p><strong><code>widget</code></strong> is a required argument that holds the specific widget that you want to add to the layout.</p>
</li>
<li>
<p><strong><code>stretch</code></strong> is an optional argument that holds an integer number representing the <a href="https://doc.qt.io/qt-5/layout.html#stretch-factors">stretch factor</a> to apply to <code>widget</code>. Widgets with higher stretch factors grow more on window resizing. It defaults to <code>0</code>, which means that the widget has no stretch factor assigned.</p>
</li>
<li>
<p><strong><code>alignment</code></strong> is an optional argument that holds horizontal and vertical <a href="https://www.riverbankcomputing.com/static/Docs/PyQt5/api/qtcore/qt.html#AlignmentFlag">flags</a>. You can combine these flags to produce the desired <a href="https://www.riverbankcomputing.com/static/Docs/PyQt5/api/qtcore/qt-alignment.html">alignment</a> of the widget inside its containing cell. It defaults to <code>0</code>, which means that the widget will fill the entire cell.</p>
</li>
</ol>
<p>Here&rsquo;s a small application that shows how to create a horizontal layout using <code>QHBoxLayout</code>. In this example, you&rsquo;ll use <a href="https://doc.qt.io/qt-5/qpushbutton.html"><code>QPushButton</code></a> objects to better visualize where each widget will be placed in the layout according to the order in which you add the widgets to your code:</p>
<div class="highlight python"><pre><span></span><code><span class="linenos"> 1</span><span class="kn">import</span> <span class="nn">sys</span>
<span class="linenos"> 2</span>
<span class="linenos"> 3</span><span class="kn">from</span> <span class="nn">PyQt5.QtWidgets</span> <span class="kn">import</span> <span class="p">(</span>
<span class="linenos"> 4</span>    <span class="n">QApplication</span><span class="p">,</span>
<span class="linenos"> 5</span>    <span class="n">QHBoxLayout</span><span class="p">,</span>
<span class="linenos"> 6</span>    <span class="n">QPushButton</span><span class="p">,</span>
<span class="linenos"> 7</span>    <span class="n">QWidget</span><span class="p">,</span>
<span class="linenos"> 8</span><span class="p">)</span>
<span class="linenos"> 9</span>
<span class="linenos">10</span><span class="k">class</span> <span class="nc">Window</span><span class="p">(</span><span class="n">QWidget</span><span class="p">):</span>
<span class="linenos">11</span>    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="linenos">12</span>        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">()</span>
<span class="linenos">13</span>        <span class="bp">self</span><span class="o">.</span><span class="n">setWindowTitle</span><span class="p">(</span><span class="s2">&quot;QHBoxLayout Example&quot;</span><span class="p">)</span>
<span class="linenos">14</span>        <span class="c1"># Create a QHBoxLayout instance</span>
<span class="linenos">15</span><span class="hll">        <span class="n">layout</span> <span class="o">=</span> <span class="n">QHBoxLayout</span><span class="p">()</span>
</span><span class="linenos">16</span>        <span class="c1"># Add widgets to the layout</span>
<span class="linenos">17</span><span class="hll">        <span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="n">QPushButton</span><span class="p">(</span><span class="s2">&quot;Left-Most&quot;</span><span class="p">))</span>
</span><span class="linenos">18</span><span class="hll">        <span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="n">QPushButton</span><span class="p">(</span><span class="s2">&quot;Center&quot;</span><span class="p">),</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="linenos">19</span><span class="hll">        <span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="n">QPushButton</span><span class="p">(</span><span class="s2">&quot;Right-Most&quot;</span><span class="p">),</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="linenos">20</span>        <span class="c1"># Set the layout on the application&#39;s window</span>
<span class="linenos">21</span><span class="hll">        <span class="bp">self</span><span class="o">.</span><span class="n">setLayout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
</span><span class="linenos">22</span>        <span class="nb">print</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">children</span><span class="p">())</span>
<span class="linenos">23</span>
<span class="linenos">24</span><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>
<span class="linenos">25</span>    <span class="n">app</span> <span class="o">=</span> <span class="n">QApplication</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span>
<span class="linenos">26</span>    <span class="n">window</span> <span class="o">=</span> <span class="n">Window</span><span class="p">()</span>
<span class="linenos">27</span>    <span class="n">window</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
<span class="linenos">28</span>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="n">app</span><span class="o">.</span><span class="n">exec_</span><span class="p">())</span>
</code></pre></div>
<p>On line 15, you create a <code>QHBoxLayout</code> object called <code>layout</code>. On lines 17 to 19, you add three buttons to <code>layout</code> using <code>.addWidget()</code>. Note that you pass <code>1</code> and <code>2</code> to the <code>stretch</code> parameter in the <em>Center</em> and <em>Right-Most</em> buttons, respectively. On line 21, you set <code>layout</code> as your window&rsquo;s top-level layout using <code>.setLayout()</code>.</p>
<div class="alert alert-primary" role="alert">
<p><strong>Note:</strong> If you&rsquo;re new to GUI programming with PyQt, then you can take a look at <a href="https://realpython.com/python-pyqt-gui-calculator/">Python and PyQt: Building a GUI Desktop Calculator</a> to get a better idea of how to create a GUI application with PyQt.</p>
</div>
<p>If you <a href="https://realpython.com/run-python-scripts/">run</a> this application, then you&rsquo;ll get the following window on your screen:</p>
<figure class="js-lightbox"><a href="https://files.realpython.com/media/QHBoxLayout-Example.c543a352d64f.gif" target="_blank"><img loading="lazy" class="img-fluid mx-auto d-block " src="https://files.realpython.com/media/QHBoxLayout-Example.c543a352d64f.gif" width="503" height="94" srcset="https://files.realpython.com/media/QHBoxLayout-Example.c543a352d64f.gif 125w, https://files.realpython.com/media/QHBoxLayout-Example.c543a352d64f.gif 251w, https://files.realpython.com/media/QHBoxLayout-Example.c543a352d64f.gif 503w" sizes="75vw" alt="QHBoxLayout Example" data-asset="3152" /></a></figure>
<p>This window contains three buttons arranged in a horizontal fashion. Note that the <em>Left-Most</em> button corresponds to the first button that you add in your code. So, buttons are shown in the same order (from left to right) that you add them in your code (from top to bottom).</p>
<p>The <em>Center</em> and <em>Right-Most</em> buttons have different stretch factors, so they expand in proportion to those factors when you resize the window.</p>
<p>Additionally, all the buttons in <code>layout</code> and the layout itself are set as children of <code>Window</code>. This is automatically done by the layout object, which internally calls <code>.setParent()</code> on each widget. The call to <a href="https://realpython.com/python-print/"><code>print()</code></a> on line 22 prints a list of the children of <code>Window</code> on your terminal as evidence of this behavior.</p>
</section><section class="section3" id="building-vertical-layouts-qvboxlayout"><h3>Building Vertical Layouts: <code>QVBoxLayout</code><a class="headerlink" href="#building-vertical-layouts-qvboxlayout" title="Permanent link"></a></h3>
<p><strong><code>QVBoxLayout</code></strong> arranges widgets <strong>vertically</strong>, one below the other. You can use this class to create vertical layouts and arrange your widgets from top to bottom. Since <code>QVBoxLayout</code> is another box layout, its <code>.addWidget()</code> method works the same as in <code>QHBoxLayout</code>.</p>
<p>Here&rsquo;s a PyQt application that shows how to create and use a <code>QVBoxLayout</code> object for creating vertical arrangements of widgets in your GUIs:</p>
<div class="highlight python"><pre><span></span><code><span class="linenos"> 1</span><span class="kn">import</span> <span class="nn">sys</span>
<span class="linenos"> 2</span>
<span class="linenos"> 3</span><span class="kn">from</span> <span class="nn">PyQt5.QtWidgets</span> <span class="kn">import</span> <span class="p">(</span>
<span class="linenos"> 4</span>    <span class="n">QApplication</span><span class="p">,</span>
<span class="linenos"> 5</span>    <span class="n">QPushButton</span><span class="p">,</span>
<span class="linenos"> 6</span>    <span class="n">QVBoxLayout</span><span class="p">,</span>
<span class="linenos"> 7</span>    <span class="n">QWidget</span><span class="p">,</span>
<span class="linenos"> 8</span><span class="p">)</span>
<span class="linenos"> 9</span>
<span class="linenos">10</span><span class="k">class</span> <span class="nc">Window</span><span class="p">(</span><span class="n">QWidget</span><span class="p">):</span>
<span class="linenos">11</span>    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="linenos">12</span>        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">()</span>
<span class="linenos">13</span>        <span class="bp">self</span><span class="o">.</span><span class="n">setWindowTitle</span><span class="p">(</span><span class="s2">&quot;QVBoxLayout Example&quot;</span><span class="p">)</span>
<span class="linenos">14</span>        <span class="bp">self</span><span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="mi">270</span><span class="p">,</span> <span class="mi">110</span><span class="p">)</span>
<span class="linenos">15</span>        <span class="c1"># Create a QVBoxLayout instance</span>
<span class="linenos">16</span><span class="hll">        <span class="n">layout</span> <span class="o">=</span> <span class="n">QVBoxLayout</span><span class="p">()</span>
</span><span class="linenos">17</span>        <span class="c1"># Add widgets to the layout</span>
<span class="linenos">18</span><span class="hll">        <span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="n">QPushButton</span><span class="p">(</span><span class="s2">&quot;Top&quot;</span><span class="p">))</span>
</span><span class="linenos">19</span><span class="hll">        <span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="n">QPushButton</span><span class="p">(</span><span class="s2">&quot;Center&quot;</span><span class="p">))</span>
</span><span class="linenos">20</span><span class="hll">        <span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="n">QPushButton</span><span class="p">(</span><span class="s2">&quot;Bottom&quot;</span><span class="p">))</span>
</span><span class="linenos">21</span>        <span class="c1"># Set the layout on the application&#39;s window</span>
<span class="linenos">22</span>        <span class="bp">self</span><span class="o">.</span><span class="n">setLayout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
<span class="linenos">23</span>
<span class="linenos">24</span><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>
<span class="linenos">25</span>    <span class="n">app</span> <span class="o">=</span> <span class="n">QApplication</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span>
<span class="linenos">26</span>    <span class="n">window</span> <span class="o">=</span> <span class="n">Window</span><span class="p">()</span>
<span class="linenos">27</span>    <span class="n">window</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
<span class="linenos">28</span>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="n">app</span><span class="o">.</span><span class="n">exec_</span><span class="p">())</span>
</code></pre></div>
<p>On line 16, you create an instance of <code>QVBoxLayout</code>. On lines 18 to 20, you add three buttons to <code>layout</code>. Finally, you set <code>layout</code> as your window&rsquo;s top-level layout.</p>
<p>If you run this application, then you&rsquo;ll get the following window:</p>
<figure class="js-lightbox"><a href="https://files.realpython.com/media/QVBoxLayout-Example.c22222cbcb5a.png" target="_blank"><img loading="lazy" class="img-fluid mx-auto d-block " src="https://files.realpython.com/media/QVBoxLayout-Example.c22222cbcb5a.png" width="258" height="131" srcset="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/QVBoxLayout-Example.c22222cbcb5a.png&amp;w=64&amp;sig=b553f88c8d80cd9ca003476b8669eeb8d2e3172e 64w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/QVBoxLayout-Example.c22222cbcb5a.png&amp;w=129&amp;sig=c1235c7ffb4f2c9ef15e40a60c5f2a8a3b4751d4 129w, https://files.realpython.com/media/QVBoxLayout-Example.c22222cbcb5a.png 258w" sizes="75vw" alt="QVBoxLayout Example" data-asset="3153" /></a></figure>
<p>Your window shows three buttons in a vertical arrangement, one below the other. The buttons appear in the same order (from top to bottom) as you add them in your code (from top to bottom).</p>
<div><div class="rounded border border-light" style="display:block;position:relative;"><div style="display:block;width:100%;padding-top:12.5%;"></div><div class="rpad rounded border" data-unit="8x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"></div></div><a class="small text-muted" href="/account/join/" rel="nofollow"><i aria-hidden="true" class="fa fa-info-circle"> </i> Remove ads</a></div></section><section class="section3" id="arranging-widgets-in-a-grid-qgridlayout"><h3>Arranging Widgets in a Grid: <code>QGridLayout</code><a class="headerlink" href="#arranging-widgets-in-a-grid-qgridlayout" title="Permanent link"></a></h3>
<p>You can use <strong><code>QGridLayout</code></strong> to arrange widgets in a <strong>grid</strong> of rows and columns. Each widget will have a relative position in the grid. To define a widget&rsquo;s position, or cell in the grid, you use a pair of coordinates of the form <code>(row, column)</code>. These coordinates should be zero-based <a href="https://realpython.com/python-numbers/#integers">integer numbers</a>.</p>
<p><code>QGridLayout</code> takes the available space on its parent, divides it into rows and columns, and places each widget into its own cell or box. <code>QGridLayout</code> automatically figures out how many rows and columns the final layout will have depending on the number of widgets and their coordinates. If you don&rsquo;t add a widget to a given cell, then <code>QGridLayout</code> will leave that cell empty.</p>
<p>To add widgets to a grid layout, you call <code>.addWidget()</code> on the layout. This method has two different <a href="https://en.wikipedia.org/w/index.php?title=Overloading_(programming)&amp;redirect=no">overloaded</a> implementations:</p>
<ol>
<li><strong><code>addWidget(widget, row, column, alignment)</code></strong> adds <code>widget</code> to the cell at (<code>row</code>, <code>column</code>).</li>
<li><strong><code>addWidget(widget, fromRow, fromColumn, rowSpan, columnSpan, alignment)</code></strong> adds <code>widget</code> to the cell, spanning multiple rows, columns, or both.</li>
</ol>
<p>The first implementation takes the following arguments:</p>
<ol>
<li><strong><code>widget</code></strong> is a required argument that holds the specific widget that you need to add to the layout.</li>
<li><strong><code>row</code></strong> is a required argument that holds an integer representing the coordinate of a row in the grid.</li>
<li><strong><code>column</code></strong> is a required argument that holds an integer representing the coordinate of a column in the grid.</li>
<li><strong><code>alignment</code></strong> is an optional argument that holds the alignment of the widget inside its containing cell. It defaults to <code>0</code>, which means that the widget will fill the entire cell.</li>
</ol>
<p>Here&rsquo;s an example of how to use <code>QGridLayout</code> to create a grid of widgets:</p>
<div class="highlight python"><pre><span></span><code><span class="linenos"> 1</span><span class="kn">import</span> <span class="nn">sys</span>
<span class="linenos"> 2</span>
<span class="linenos"> 3</span><span class="kn">from</span> <span class="nn">PyQt5.QtWidgets</span> <span class="kn">import</span> <span class="p">(</span>
<span class="linenos"> 4</span>    <span class="n">QApplication</span><span class="p">,</span>
<span class="linenos"> 5</span>    <span class="n">QGridLayout</span><span class="p">,</span>
<span class="linenos"> 6</span>    <span class="n">QPushButton</span><span class="p">,</span>
<span class="linenos"> 7</span>    <span class="n">QWidget</span><span class="p">,</span>
<span class="linenos"> 8</span><span class="p">)</span>
<span class="linenos"> 9</span>
<span class="linenos">10</span><span class="k">class</span> <span class="nc">Window</span><span class="p">(</span><span class="n">QWidget</span><span class="p">):</span>
<span class="linenos">11</span>    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="linenos">12</span>        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">()</span>
<span class="linenos">13</span>        <span class="bp">self</span><span class="o">.</span><span class="n">setWindowTitle</span><span class="p">(</span><span class="s2">&quot;QGridLayout Example&quot;</span><span class="p">)</span>
<span class="linenos">14</span>        <span class="c1"># Create a QGridLayout instance</span>
<span class="linenos">15</span><span class="hll">        <span class="n">layout</span> <span class="o">=</span> <span class="n">QGridLayout</span><span class="p">()</span>
</span><span class="linenos">16</span>        <span class="c1"># Add widgets to the layout</span>
<span class="linenos">17</span><span class="hll">        <span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="n">QPushButton</span><span class="p">(</span><span class="s2">&quot;Button at (0, 0)&quot;</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="linenos">18</span><span class="hll">        <span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="n">QPushButton</span><span class="p">(</span><span class="s2">&quot;Button at (0, 1)&quot;</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="linenos">19</span><span class="hll">        <span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="n">QPushButton</span><span class="p">(</span><span class="s2">&quot;Button at (0, 2)&quot;</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="linenos">20</span><span class="hll">        <span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="n">QPushButton</span><span class="p">(</span><span class="s2">&quot;Button at (1, 0)&quot;</span><span class="p">),</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="linenos">21</span><span class="hll">        <span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="n">QPushButton</span><span class="p">(</span><span class="s2">&quot;Button at (1, 1)&quot;</span><span class="p">),</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="linenos">22</span><span class="hll">        <span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="n">QPushButton</span><span class="p">(</span><span class="s2">&quot;Button at (1, 2)&quot;</span><span class="p">),</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="linenos">23</span><span class="hll">        <span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="n">QPushButton</span><span class="p">(</span><span class="s2">&quot;Button at (2, 0)&quot;</span><span class="p">),</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="linenos">24</span><span class="hll">        <span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="n">QPushButton</span><span class="p">(</span><span class="s2">&quot;Button at (2, 1)&quot;</span><span class="p">),</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="linenos">25</span><span class="hll">        <span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="n">QPushButton</span><span class="p">(</span><span class="s2">&quot;Button at (2, 2)&quot;</span><span class="p">),</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="linenos">26</span>        <span class="c1"># Set the layout on the application&#39;s window</span>
<span class="linenos">27</span>        <span class="bp">self</span><span class="o">.</span><span class="n">setLayout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
<span class="linenos">28</span>
<span class="linenos">29</span><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>
<span class="linenos">30</span>    <span class="n">app</span> <span class="o">=</span> <span class="n">QApplication</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span>
<span class="linenos">31</span>    <span class="n">window</span> <span class="o">=</span> <span class="n">Window</span><span class="p">()</span>
<span class="linenos">32</span>    <span class="n">window</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
<span class="linenos">33</span>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="n">app</span><span class="o">.</span><span class="n">exec_</span><span class="p">())</span>
</code></pre></div>
<p>On line 15, you create the <code>QGridLayout</code> object. Then, on lines 17 to 25, you add widgets to the layout using <code>.addWidget()</code>. To see how grid layouts manage cells without an assigned widget, comment out one or more of these lines and run the application again.</p>
<p>If you run this code from your command line, then you&rsquo;ll get a window like this:</p>
<figure class="js-lightbox"><a href="https://files.realpython.com/media/QGridLayout-Example.52ae870105f6.png" target="_blank"><img loading="lazy" class="img-fluid mx-auto d-block " src="https://files.realpython.com/media/QGridLayout-Example.52ae870105f6.png" width="327" height="131" srcset="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/QGridLayout-Example.52ae870105f6.png&amp;w=81&amp;sig=df7b9fa816c36b15e4a85c271dde80222bfbe791 81w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/QGridLayout-Example.52ae870105f6.png&amp;w=163&amp;sig=a7b5bc33bdb5f4cd036689fef7c015bf0a0e190f 163w, https://files.realpython.com/media/QGridLayout-Example.52ae870105f6.png 327w" sizes="75vw" alt="QGridLayout Example" data-asset="3154" /></a></figure>
<p>Each widget in the <code>QGridLayout</code> object occupies the cell defined by the pair of coordinates that you provide in <code>.addWidget()</code>. The text on each button reflects those coordinates. The coordinates are zero-based, so the first cell is at <code>(0, 0)</code>.</p>
<p>In the second implementation of <code>.addWidget()</code>, the arguments <code>widget</code> and <code>alignment</code> stay the same, and you have four additional arguments that allow you to place the widget across several rows or columns:</p>
<ol>
<li><strong><code>fromRow</code></strong> takes an integer number that represents the row in which the widget will start.</li>
<li><strong><code>fromColumn</code></strong> takes an integer number that represents the column in which the widget will start.</li>
<li><strong><code>rowSpan</code></strong> takes an integer number that represents the number of rows that the widget will occupy in the grid.</li>
<li><strong><code>columnSpan</code></strong> takes an integer number that represents the number of columns that the widget will occupy in the grid.</li>
</ol>
<p>Here&rsquo;s an application that shows how this variation of <code>.addWidget()</code> works:</p>
<div class="highlight python"><pre><span></span><code><span class="linenos"> 1</span><span class="kn">import</span> <span class="nn">sys</span>
<span class="linenos"> 2</span>
<span class="linenos"> 3</span><span class="kn">from</span> <span class="nn">PyQt5.QtWidgets</span> <span class="kn">import</span> <span class="p">(</span>
<span class="linenos"> 4</span>    <span class="n">QApplication</span><span class="p">,</span>
<span class="linenos"> 5</span>    <span class="n">QGridLayout</span><span class="p">,</span>
<span class="linenos"> 6</span>    <span class="n">QPushButton</span><span class="p">,</span>
<span class="linenos"> 7</span>    <span class="n">QWidget</span><span class="p">,</span>
<span class="linenos"> 8</span><span class="p">)</span>
<span class="linenos"> 9</span>
<span class="linenos">10</span><span class="k">class</span> <span class="nc">Window</span><span class="p">(</span><span class="n">QWidget</span><span class="p">):</span>
<span class="linenos">11</span>    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="linenos">12</span>        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">()</span>
<span class="linenos">13</span>        <span class="bp">self</span><span class="o">.</span><span class="n">setWindowTitle</span><span class="p">(</span><span class="s2">&quot;QGridLayout Example&quot;</span><span class="p">)</span>
<span class="linenos">14</span>        <span class="c1"># Create a QGridLayout instance</span>
<span class="linenos">15</span>        <span class="n">layout</span> <span class="o">=</span> <span class="n">QGridLayout</span><span class="p">()</span>
<span class="linenos">16</span>        <span class="c1"># Add widgets to the layout</span>
<span class="linenos">17</span>        <span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="n">QPushButton</span><span class="p">(</span><span class="s2">&quot;Button at (0, 0)&quot;</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="linenos">18</span>        <span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="n">QPushButton</span><span class="p">(</span><span class="s2">&quot;Button at (0, 1)&quot;</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="linenos">19</span><span class="hll">        <span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="n">QPushButton</span><span class="p">(</span><span class="s2">&quot;Button Spans two Cols&quot;</span><span class="p">),</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="linenos">20</span>        <span class="c1"># Set the layout on the application&#39;s window</span>
<span class="linenos">21</span>        <span class="bp">self</span><span class="o">.</span><span class="n">setLayout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
<span class="linenos">22</span>
<span class="linenos">23</span><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>
<span class="linenos">24</span>    <span class="n">app</span> <span class="o">=</span> <span class="n">QApplication</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span>
<span class="linenos">25</span>    <span class="n">window</span> <span class="o">=</span> <span class="n">Window</span><span class="p">()</span>
<span class="linenos">26</span>    <span class="n">window</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
<span class="linenos">27</span>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="n">app</span><span class="o">.</span><span class="n">exec_</span><span class="p">())</span>
</code></pre></div>
<p>On line 19, you use the second implementation of <code>.addWidget()</code> to add a button that occupies two columns in the grid. The button starts at the second row (<code>fromRow=1</code>) and at the first column (<code>fromColumn=0</code>). Finally, the button occupies one row (<code>rowSpan=1</code>) and two columns (<code>columnSpan=2</code>).</p>
<div class="alert alert-primary" role="alert">
<p><strong>Note:</strong> Since <a href="https://www.riverbankcomputing.com/static/Docs/PyQt5/introduction.html">PyQt is a Python binding</a> for <a href="https://wiki.qt.io/About_Qt">Qt</a>, which is a set of <a href="https://realpython.com/python-vs-cpp/">C++</a> libraries, sometimes you can&rsquo;t use <a href="https://realpython.com/python-kwargs-and-args/">keyword arguments</a> when calling PyQt methods. The keyword arguments used in the above paragraph have the sole purpose of showing what value is assigned to each argument.</p>
</div>
<p>Here&rsquo;s the window that you&rsquo;ll see on your screen if you run this application:</p>
<figure class="js-lightbox"><a href="https://files.realpython.com/media/QGridLayout-Span-Example.bd462d9921a3.png" target="_blank"><img loading="lazy" class="img-fluid mx-auto d-block " src="https://files.realpython.com/media/QGridLayout-Span-Example.bd462d9921a3.png" width="224" height="101" srcset="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/QGridLayout-Span-Example.bd462d9921a3.png&amp;w=56&amp;sig=1c0b497eb61a2d46e3d47c26ad5575645bca507f 56w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/QGridLayout-Span-Example.bd462d9921a3.png&amp;w=112&amp;sig=a47570e84e55df59527cbb5582d3bcd008e03dba 112w, https://files.realpython.com/media/QGridLayout-Span-Example.bd462d9921a3.png 224w" sizes="75vw" alt="QGridLayout Span Example" data-asset="3155" /></a></figure>
<p>In this kind of layout, you can make a widget occupy more than one cell, just as you did with the <em>Button Spans two Cols</em> button.</p>
<div><div class="rounded border border-light" style="display:block;position:relative;"><div style="display:block;width:100%;padding-top:12.5%;"></div><div class="rpad rounded border" data-unit="8x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"></div></div><a class="small text-muted" href="/account/join/" rel="nofollow"><i aria-hidden="true" class="fa fa-info-circle"> </i> Remove ads</a></div></section><section class="section3" id="creating-forms-quickly-qformlayout"><h3>Creating Forms Quickly: <code>QFormLayout</code><a class="headerlink" href="#creating-forms-quickly-qformlayout" title="Permanent link"></a></h3>
<p>If you&rsquo;re constantly creating forms to perform actions like inputting data into a database, then <strong><code>QFormLayout</code></strong> is for you. This class arranges widgets in a <strong>two-column</strong> layout. The first column usually displays a <strong>label</strong> describing the intended input, and the second column generally contains <strong>input widgets</strong> such as <a href="https://doc.qt.io/qt-5/qlineedit.html"><code>QLineEdit</code></a>, <a href="https://doc.qt.io/qt-5/qcombobox.html"><code>QComboBox</code></a>, or <a href="https://doc.qt.io/qt-5/qspinbox.html"><code>QSpinBox</code></a> that allow the user to enter or edit data.</p>
<p>To add widgets to a form layout, you use <code>.addRow()</code>. This method has several variations but, most of the time, you&rsquo;ll choose from the following two:</p>
<ol>
<li>
<p><strong><code>.addRow(label, field)</code></strong> adds a new row to the bottom of a form layout. The row should contain a <code>QLabel</code> object (<code>label</code>) and an input widget (<code>field</code>).</p>
</li>
<li>
<p><strong><code>.addRow(labelText, field)</code></strong> automatically creates and adds a new <code>QLabel</code> object with <code>labelText</code> as its text. <code>field</code> holds an input widget.</p>
</li>
</ol>
<p>Here&rsquo;s a sample application that uses a <code>QFormLayout</code> object to arrange widgets:</p>
<div class="highlight python"><pre><span></span><code><span class="linenos"> 1</span><span class="kn">import</span> <span class="nn">sys</span>
<span class="linenos"> 2</span>
<span class="linenos"> 3</span><span class="kn">from</span> <span class="nn">PyQt5.QtWidgets</span> <span class="kn">import</span> <span class="p">(</span>
<span class="linenos"> 4</span>    <span class="n">QApplication</span><span class="p">,</span>
<span class="linenos"> 5</span>    <span class="n">QFormLayout</span><span class="p">,</span>
<span class="linenos"> 6</span>    <span class="n">QLabel</span><span class="p">,</span>
<span class="linenos"> 7</span>    <span class="n">QLineEdit</span><span class="p">,</span>
<span class="linenos"> 8</span>    <span class="n">QWidget</span><span class="p">,</span>
<span class="linenos"> 9</span><span class="p">)</span>
<span class="linenos">10</span>
<span class="linenos">11</span><span class="k">class</span> <span class="nc">Window</span><span class="p">(</span><span class="n">QWidget</span><span class="p">):</span>
<span class="linenos">12</span>    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="linenos">13</span>        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">()</span>
<span class="linenos">14</span>        <span class="bp">self</span><span class="o">.</span><span class="n">setWindowTitle</span><span class="p">(</span><span class="s2">&quot;QFormLayout Example&quot;</span><span class="p">)</span>
<span class="linenos">15</span>        <span class="bp">self</span><span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="mi">270</span><span class="p">,</span> <span class="mi">110</span><span class="p">)</span>
<span class="linenos">16</span>        <span class="c1"># Create a QFormLayout instance</span>
<span class="linenos">17</span><span class="hll">        <span class="n">layout</span> <span class="o">=</span> <span class="n">QFormLayout</span><span class="p">()</span>
</span><span class="linenos">18</span>        <span class="c1"># Add widgets to the layout</span>
<span class="linenos">19</span><span class="hll">        <span class="n">layout</span><span class="o">.</span><span class="n">addRow</span><span class="p">(</span><span class="s2">&quot;Name:&quot;</span><span class="p">,</span> <span class="n">QLineEdit</span><span class="p">())</span>
</span><span class="linenos">20</span><span class="hll">        <span class="n">layout</span><span class="o">.</span><span class="n">addRow</span><span class="p">(</span><span class="s2">&quot;Job:&quot;</span><span class="p">,</span> <span class="n">QLineEdit</span><span class="p">())</span>
</span><span class="linenos">21</span>        <span class="n">emailLabel</span> <span class="o">=</span> <span class="n">QLabel</span><span class="p">(</span><span class="s2">&quot;Email:&quot;</span><span class="p">)</span>
<span class="linenos">22</span><span class="hll">        <span class="n">layout</span><span class="o">.</span><span class="n">addRow</span><span class="p">(</span><span class="n">emailLabel</span><span class="p">,</span> <span class="n">QLineEdit</span><span class="p">())</span>
</span><span class="linenos">23</span>        <span class="c1"># Set the layout on the application&#39;s window</span>
<span class="linenos">24</span>        <span class="bp">self</span><span class="o">.</span><span class="n">setLayout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
<span class="linenos">25</span>
<span class="linenos">26</span><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>
<span class="linenos">27</span>    <span class="n">app</span> <span class="o">=</span> <span class="n">QApplication</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span>
<span class="linenos">28</span>    <span class="n">window</span> <span class="o">=</span> <span class="n">Window</span><span class="p">()</span>
<span class="linenos">29</span>    <span class="n">window</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
<span class="linenos">30</span>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="n">app</span><span class="o">.</span><span class="n">exec_</span><span class="p">())</span>
</code></pre></div>
<p>On line 17, you create a <code>QFormLayout</code> object. Then, on lines 19 to 22, you add some rows to the layout. Note that on lines 19 and 20, you use the second variation of the method, and on line 22, you use the first variation, passing a <code>QLabel</code> object as the first argument to <code>.addRow()</code>.</p>
<p>If you run this code, then you&rsquo;ll get the following window on your screen:</p>
<figure class="js-lightbox"><a href="https://files.realpython.com/media/QFormLayout-Example.171dd672d776.png" target="_blank"><img loading="lazy" class="img-fluid mx-auto d-block " src="https://files.realpython.com/media/QFormLayout-Example.171dd672d776.png" width="277" height="136" srcset="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/QFormLayout-Example.171dd672d776.png&amp;w=69&amp;sig=b1cf60542d3e53de88c98043a1560b836b2c7f5a 69w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/QFormLayout-Example.171dd672d776.png&amp;w=138&amp;sig=dbee91b0324a063ccd2002e8c8416892acb596b4 138w, https://files.realpython.com/media/QFormLayout-Example.171dd672d776.png 277w" sizes="75vw" alt="QFormLayout Example" data-asset="3156" /></a></figure>
<p>With a <code>QFormLayout</code>, you can organize your widgets in a two-column arrangement. The first column contains labels that ask the user for some information. The second column shows widgets that allow the user to input or edit that information.</p>
</section></section><section class="section2" id="nesting-layouts-to-build-complex-guis"><h2>Nesting Layouts to Build Complex GUIs<a class="headerlink" href="#nesting-layouts-to-build-complex-guis" title="Permanent link"></a></h2>
<p>You can use <strong>nested</strong> layouts to create complex GUIs that would be difficult to create using one of the general-purpose PyQt&rsquo;s layout managers. To do that, you need to call <code>.addLayout()</code> on an <strong>outer layout</strong>. This way, the <strong>inner layout</strong> becomes a child of the outer layout.</p>
<p>Suppose you need to create a dialog that shows a label and a line edit in a form layout, and below those widgets you want to place several checkboxes in a vertical layout. Here&rsquo;s a mock-up of what your dialog should look like:</p>
<figure class="js-lightbox"><a href="https://files.realpython.com/media/Nested-Layouts-diagram.18da29f2988f.png" target="_blank"><img loading="lazy" class="img-fluid mx-auto d-block w-50" src="https://files.realpython.com/media/Nested-Layouts-diagram.18da29f2988f.png" width="442" height="322" srcset="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/Nested-Layouts-diagram.18da29f2988f.png&amp;w=110&amp;sig=e9da15e4fe69638d132a9378ac3b5ef217e3a151 110w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/Nested-Layouts-diagram.18da29f2988f.png&amp;w=221&amp;sig=4435f7d32dbeda5497dc42097739c0aa517e75d4 221w, https://files.realpython.com/media/Nested-Layouts-diagram.18da29f2988f.png 442w" sizes="75vw" alt="Nested Layouts Diagram" data-asset="3228" /></a></figure>
<p>The blue rectangle represents your outer layout. The green rectangle is the form layout that will hold the label and line edit. The red rectangle is the vertical layout to hold the option checkboxes. Both the green layout and the red layout are nested into the blue one, which is a vertical layout.</p>
<p>Here&rsquo;s an example of how to build this layout using PyQt:</p>
<div class="highlight python"><pre><span></span><code><span class="linenos"> 1</span><span class="kn">import</span> <span class="nn">sys</span>
<span class="linenos"> 2</span>
<span class="linenos"> 3</span><span class="kn">from</span> <span class="nn">PyQt5.QtWidgets</span> <span class="kn">import</span> <span class="p">(</span>
<span class="linenos"> 4</span>    <span class="n">QApplication</span><span class="p">,</span>
<span class="linenos"> 5</span>    <span class="n">QCheckBox</span><span class="p">,</span>
<span class="linenos"> 6</span>    <span class="n">QFormLayout</span><span class="p">,</span>
<span class="linenos"> 7</span>    <span class="n">QLineEdit</span><span class="p">,</span>
<span class="linenos"> 8</span>    <span class="n">QVBoxLayout</span><span class="p">,</span>
<span class="linenos"> 9</span>    <span class="n">QWidget</span><span class="p">,</span>
<span class="linenos">10</span><span class="p">)</span>
<span class="linenos">11</span>
<span class="linenos">12</span><span class="k">class</span> <span class="nc">Window</span><span class="p">(</span><span class="n">QWidget</span><span class="p">):</span>
<span class="linenos">13</span>    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="linenos">14</span>        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">()</span>
<span class="linenos">15</span>        <span class="bp">self</span><span class="o">.</span><span class="n">setWindowTitle</span><span class="p">(</span><span class="s2">&quot;Nested Layouts Example&quot;</span><span class="p">)</span>
<span class="linenos">16</span>        <span class="c1"># Create an outer layout</span>
<span class="linenos">17</span><span class="hll">        <span class="n">outerLayout</span> <span class="o">=</span> <span class="n">QVBoxLayout</span><span class="p">()</span>
</span><span class="linenos">18</span>        <span class="c1"># Create a form layout for the label and line edit</span>
<span class="linenos">19</span><span class="hll">        <span class="n">topLayout</span> <span class="o">=</span> <span class="n">QFormLayout</span><span class="p">()</span>
</span><span class="linenos">20</span>        <span class="c1"># Add a label and a line edit to the form layout</span>
<span class="linenos">21</span><span class="hll">        <span class="n">topLayout</span><span class="o">.</span><span class="n">addRow</span><span class="p">(</span><span class="s2">&quot;Some Text:&quot;</span><span class="p">,</span> <span class="n">QLineEdit</span><span class="p">())</span>
</span><span class="linenos">22</span>        <span class="c1"># Create a layout for the checkboxes</span>
<span class="linenos">23</span><span class="hll">        <span class="n">optionsLayout</span> <span class="o">=</span> <span class="n">QVBoxLayout</span><span class="p">()</span>
</span><span class="linenos">24</span>        <span class="c1"># Add some checkboxes to the layout</span>
<span class="linenos">25</span><span class="hll">        <span class="n">optionsLayout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="n">QCheckBox</span><span class="p">(</span><span class="s2">&quot;Option one&quot;</span><span class="p">))</span>
</span><span class="linenos">26</span><span class="hll">        <span class="n">optionsLayout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="n">QCheckBox</span><span class="p">(</span><span class="s2">&quot;Option two&quot;</span><span class="p">))</span>
</span><span class="linenos">27</span><span class="hll">        <span class="n">optionsLayout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="n">QCheckBox</span><span class="p">(</span><span class="s2">&quot;Option three&quot;</span><span class="p">))</span>
</span><span class="linenos">28</span>        <span class="c1"># Nest the inner layouts into the outer layout</span>
<span class="linenos">29</span><span class="hll">        <span class="n">outerLayout</span><span class="o">.</span><span class="n">addLayout</span><span class="p">(</span><span class="n">topLayout</span><span class="p">)</span>
</span><span class="linenos">30</span><span class="hll">        <span class="n">outerLayout</span><span class="o">.</span><span class="n">addLayout</span><span class="p">(</span><span class="n">optionsLayout</span><span class="p">)</span>
</span><span class="linenos">31</span>        <span class="c1"># Set the window&#39;s main layout</span>
<span class="linenos">32</span>        <span class="bp">self</span><span class="o">.</span><span class="n">setLayout</span><span class="p">(</span><span class="n">outerLayout</span><span class="p">)</span>
<span class="linenos">33</span>
<span class="linenos">34</span><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>
<span class="linenos">35</span>    <span class="n">app</span> <span class="o">=</span> <span class="n">QApplication</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span>
<span class="linenos">36</span>    <span class="n">window</span> <span class="o">=</span> <span class="n">Window</span><span class="p">()</span>
<span class="linenos">37</span>    <span class="n">window</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
<span class="linenos">38</span>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="n">app</span><span class="o">.</span><span class="n">exec_</span><span class="p">())</span>
</code></pre></div>
<p>Here&rsquo;s what you&rsquo;re doing in this code:</p>
<ul>
<li><strong>On line 17</strong>, you create the outer, or top-level, layout, which you&rsquo;ll use as a parent layout and as the main layout of your window. In this case, you use <code>QVBoxLayout</code> because you want your widgets to be arranged vertically on your form. In your mock-up, this is the blue layout.</li>
<li><strong>On line 19</strong>, you create a form layout to hold a label and a line edit.</li>
<li><strong>On line 21</strong>, you add the required widgets to the layout. This is equivalent to your green layout.</li>
<li><strong>On line 23</strong>, you create a vertical layout to hold the checkboxes.</li>
<li><strong>On lines 25 to 27</strong>, you add the required checkboxes. This is your red layout.</li>
<li><strong>On lines 29 and 30</strong>, you nest <code>topLayout</code> and <code>optionsLayout</code> under the <code>outerLayout</code>.</li>
</ul>
<p>That&rsquo;s it! If you run the application, then you&rsquo;ll see a window like the following:</p>
<figure class="js-lightbox"><a href="https://files.realpython.com/media/Nested-Layouts-Example.a9f3c97077d6.png" target="_blank"><img loading="lazy" class="img-fluid mx-auto d-block " src="https://files.realpython.com/media/Nested-Layouts-Example.a9f3c97077d6.png" width="297" height="169" srcset="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/Nested-Layouts-Example.a9f3c97077d6.png&amp;w=74&amp;sig=7b52913b4bb2aca9a29a39ef9d1b43ddba15a958 74w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/Nested-Layouts-Example.a9f3c97077d6.png&amp;w=148&amp;sig=c8c3be11ca75c5d42038737e3dcb14cae7676aa6 148w, https://files.realpython.com/media/Nested-Layouts-Example.a9f3c97077d6.png 297w" sizes="75vw" alt="Nested Layouts Example" data-asset="3157" /></a></figure>
<p>In this application, you nest two different layouts under an outer layout to create a general layout for your window. At the top of the window, you use a horizontal layout to place a label and a line edit. Then you place some checkboxes below that using a vertical layout.</p>
<div><div class="rounded border border-light" style="display:block;position:relative;"><div style="display:block;width:100%;padding-top:12.5%;"></div><div class="rpad rounded border" data-unit="8x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"></div></div><a class="small text-muted" href="/account/join/" rel="nofollow"><i aria-hidden="true" class="fa fa-info-circle"> </i> Remove ads</a></div></section><section class="section2" id="using-multipage-layouts-and-widgets"><h2>Using Multipage Layouts and Widgets<a class="headerlink" href="#using-multipage-layouts-and-widgets" title="Permanent link"></a></h2>
<p>So far, you&rsquo;ve seen how to use traditional or general-purpose layout managers to arrange the widgets in your application&rsquo;s windows. These layout managers will arrange widgets on a <strong>single-page layout</strong>. In other words, your GUI will always show the same set of widgets to the user.</p>
<p>Sometimes you need to create a layout that shows a different set of widgets in response to certain user actions on the GUI. For example, if you&rsquo;re creating a preferences dialog for a given application, then you might want to present the user with a <strong>tab-based</strong>, or <strong>multipage</strong>, layout in which each tab or page contains a different set of closely related options. Every time the user clicks on a tab or page, the application shows a different set of widgets.</p>
<p>PyQt provides a built-in layout called <a href="https://www.riverbankcomputing.com/static/Docs/PyQt5/api/qtwidgets/qstackedlayout.html#"><code>QStackedLayout</code></a> and some convenient widgets like <a href="https://www.riverbankcomputing.com/static/Docs/PyQt5/api/qtwidgets/qtabwidget.html#"><code>QTabWidget</code></a> that will allow you to create this kind of multipage layout. The next few sections will walk you through some of these tools.</p>
<section class="section3" id="creating-a-stack-of-widgets"><h3>Creating a Stack of Widgets<a class="headerlink" href="#creating-a-stack-of-widgets" title="Permanent link"></a></h3>
<p><strong><code>QStackedLayout</code></strong> provides a layout manager that will allow you to arrange your widgets on a <strong>stack</strong>, one on top of the other. In this kind of layout, only one widget is visible at a given time.</p>
<p>To populate a stacked layout with widgets, you need to call <code>.addWidget()</code> on the layout object. This will add each widget to the end of the layout&rsquo;s internal list of widgets. You can also insert or remove a widget at a given position in the list of widgets using <code>.insertWidget(index)</code> or <code>.removeWidget(widget)</code>, respectively.</p>
<p>Each widget in the list of widgets is displayed as an independent page. If you want to show several widgets on a page, then use a <code>QWidget</code> object for each page and set an appropriate layout of widgets to the page widget. If you need to get the total number of widgets (pages) in the layout, then you can call <code>.count()</code>.</p>
<p>An important point to keep in mind when working with <code>QStackedLayout</code> objects is that you need to explicitly provide a mechanism to switch between pages. Otherwise, your layout will always show the same page to the user. To switch between pages, you need to call <code>.setCurrentIndex()</code> on the layout object.</p>
<p>Here&rsquo;s an example that shows how to use a stacked layout with a combo box for switching between pages:</p>
<div class="highlight python"><pre><span></span><code><span class="linenos"> 1</span><span class="kn">import</span> <span class="nn">sys</span>
<span class="linenos"> 2</span>
<span class="linenos"> 3</span><span class="kn">from</span> <span class="nn">PyQt5.QtWidgets</span> <span class="kn">import</span> <span class="p">(</span>
<span class="linenos"> 4</span>    <span class="n">QApplication</span><span class="p">,</span>
<span class="linenos"> 5</span>    <span class="n">QComboBox</span><span class="p">,</span>
<span class="linenos"> 6</span>    <span class="n">QFormLayout</span><span class="p">,</span>
<span class="linenos"> 7</span>    <span class="n">QLineEdit</span><span class="p">,</span>
<span class="linenos"> 8</span>    <span class="n">QStackedLayout</span><span class="p">,</span>
<span class="linenos"> 9</span>    <span class="n">QVBoxLayout</span><span class="p">,</span>
<span class="linenos">10</span>    <span class="n">QWidget</span><span class="p">,</span>
<span class="linenos">11</span><span class="p">)</span>
<span class="linenos">12</span>
<span class="linenos">13</span><span class="k">class</span> <span class="nc">Window</span><span class="p">(</span><span class="n">QWidget</span><span class="p">):</span>
<span class="linenos">14</span>    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="linenos">15</span>        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">()</span>
<span class="linenos">16</span>        <span class="bp">self</span><span class="o">.</span><span class="n">setWindowTitle</span><span class="p">(</span><span class="s2">&quot;QStackedLayout Example&quot;</span><span class="p">)</span>
<span class="linenos">17</span>        <span class="c1"># Create a top-level layout</span>
<span class="linenos">18</span>        <span class="n">layout</span> <span class="o">=</span> <span class="n">QVBoxLayout</span><span class="p">()</span>
<span class="linenos">19</span>        <span class="bp">self</span><span class="o">.</span><span class="n">setLayout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
<span class="linenos">20</span>        <span class="c1"># Create and connect the combo box to switch between pages</span>
<span class="linenos">21</span><span class="hll">        <span class="bp">self</span><span class="o">.</span><span class="n">pageCombo</span> <span class="o">=</span> <span class="n">QComboBox</span><span class="p">()</span>
</span><span class="linenos">22</span><span class="hll">        <span class="bp">self</span><span class="o">.</span><span class="n">pageCombo</span><span class="o">.</span><span class="n">addItems</span><span class="p">([</span><span class="s2">&quot;Page 1&quot;</span><span class="p">,</span> <span class="s2">&quot;Page 2&quot;</span><span class="p">])</span>
</span><span class="linenos">23</span><span class="hll">        <span class="bp">self</span><span class="o">.</span><span class="n">pageCombo</span><span class="o">.</span><span class="n">activated</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">switchPage</span><span class="p">)</span>
</span><span class="linenos">24</span>        <span class="c1"># Create the stacked layout</span>
<span class="linenos">25</span><span class="hll">        <span class="bp">self</span><span class="o">.</span><span class="n">stackedLayout</span> <span class="o">=</span> <span class="n">QStackedLayout</span><span class="p">()</span>
</span><span class="linenos">26</span>        <span class="c1"># Create the first page</span>
<span class="linenos">27</span><span class="hll">        <span class="bp">self</span><span class="o">.</span><span class="n">page1</span> <span class="o">=</span> <span class="n">QWidget</span><span class="p">()</span>
</span><span class="linenos">28</span><span class="hll">        <span class="bp">self</span><span class="o">.</span><span class="n">page1Layout</span> <span class="o">=</span> <span class="n">QFormLayout</span><span class="p">()</span>
</span><span class="linenos">29</span><span class="hll">        <span class="bp">self</span><span class="o">.</span><span class="n">page1Layout</span><span class="o">.</span><span class="n">addRow</span><span class="p">(</span><span class="s2">&quot;Name:&quot;</span><span class="p">,</span> <span class="n">QLineEdit</span><span class="p">())</span>
</span><span class="linenos">30</span><span class="hll">        <span class="bp">self</span><span class="o">.</span><span class="n">page1Layout</span><span class="o">.</span><span class="n">addRow</span><span class="p">(</span><span class="s2">&quot;Address:&quot;</span><span class="p">,</span> <span class="n">QLineEdit</span><span class="p">())</span>
</span><span class="linenos">31</span><span class="hll">        <span class="bp">self</span><span class="o">.</span><span class="n">page1</span><span class="o">.</span><span class="n">setLayout</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">page1Layout</span><span class="p">)</span>
</span><span class="linenos">32</span><span class="hll">        <span class="bp">self</span><span class="o">.</span><span class="n">stackedLayout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">page1</span><span class="p">)</span>
</span><span class="linenos">33</span>        <span class="c1"># Create the second page</span>
<span class="linenos">34</span><span class="hll">        <span class="bp">self</span><span class="o">.</span><span class="n">page2</span> <span class="o">=</span> <span class="n">QWidget</span><span class="p">()</span>
</span><span class="linenos">35</span><span class="hll">        <span class="bp">self</span><span class="o">.</span><span class="n">page2Layout</span> <span class="o">=</span> <span class="n">QFormLayout</span><span class="p">()</span>
</span><span class="linenos">36</span><span class="hll">        <span class="bp">self</span><span class="o">.</span><span class="n">page2Layout</span><span class="o">.</span><span class="n">addRow</span><span class="p">(</span><span class="s2">&quot;Job:&quot;</span><span class="p">,</span> <span class="n">QLineEdit</span><span class="p">())</span>
</span><span class="linenos">37</span><span class="hll">        <span class="bp">self</span><span class="o">.</span><span class="n">page2Layout</span><span class="o">.</span><span class="n">addRow</span><span class="p">(</span><span class="s2">&quot;Department:&quot;</span><span class="p">,</span> <span class="n">QLineEdit</span><span class="p">())</span>
</span><span class="linenos">38</span><span class="hll">        <span class="bp">self</span><span class="o">.</span><span class="n">page2</span><span class="o">.</span><span class="n">setLayout</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">page2Layout</span><span class="p">)</span>
</span><span class="linenos">39</span><span class="hll">        <span class="bp">self</span><span class="o">.</span><span class="n">stackedLayout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">page2</span><span class="p">)</span>
</span><span class="linenos">40</span>        <span class="c1"># Add the combo box and the stacked layout to the top-level layout</span>
<span class="linenos">41</span>        <span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pageCombo</span><span class="p">)</span>
<span class="linenos">42</span>        <span class="n">layout</span><span class="o">.</span><span class="n">addLayout</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">stackedLayout</span><span class="p">)</span>
<span class="linenos">43</span>
<span class="linenos">44</span>    <span class="k">def</span> <span class="nf">switchPage</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="linenos">45</span>        <span class="bp">self</span><span class="o">.</span><span class="n">stackedLayout</span><span class="o">.</span><span class="n">setCurrentIndex</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pageCombo</span><span class="o">.</span><span class="n">currentIndex</span><span class="p">())</span>
<span class="linenos">46</span>
<span class="linenos">47</span><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>
<span class="linenos">48</span>    <span class="n">app</span> <span class="o">=</span> <span class="n">QApplication</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span>
<span class="linenos">49</span>    <span class="n">window</span> <span class="o">=</span> <span class="n">Window</span><span class="p">()</span>
<span class="linenos">50</span>    <span class="n">window</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
<span class="linenos">51</span>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="n">app</span><span class="o">.</span><span class="n">exec_</span><span class="p">())</span>
</code></pre></div>
<p>On lines 21 to 23, you create a <code>QComboBox</code> object that will allow you to switch between the pages in the layout. Then you add two options to the combo box in a <a href="https://realpython.com/python-lists-tuples/">list</a> and connect it to <code>.switchPage()</code>, which is intended to handle page switching.</p>
<p>Inside <code>.switchPage()</code>, you call <code>.setCurrentIndex()</code> on the layout object, passing the current index of the combo box as an argument. This way, when the user changes the option in the combo box, the page on the stacked layout will change accordingly.</p>
<p>On line 25, you create the <code>QStackedLayout</code> object. On lines 27 to 32, you add the first page to the layout, and on lines 34 to 39, you add the second page. Each page is represented by a <code>QWidget</code> object that contains several widgets in a convenient layout.</p>
<p>The final step to get everything working is to add the combo box and the layout to the application&rsquo;s main layout.</p>
<p>Here&rsquo;s how your application behaves now:</p>
<figure class="js-lightbox"><a href="https://files.realpython.com/media/QStackedLayout-Example.82a2ab5d8798.gif" target="_blank"><img loading="lazy" class="img-fluid mx-auto d-block " src="https://files.realpython.com/media/QStackedLayout-Example.82a2ab5d8798.gif" width="271" height="183" srcset="https://files.realpython.com/media/QStackedLayout-Example.82a2ab5d8798.gif 67w, https://files.realpython.com/media/QStackedLayout-Example.82a2ab5d8798.gif 135w, https://files.realpython.com/media/QStackedLayout-Example.82a2ab5d8798.gif 271w" sizes="75vw" alt="QStackedLayout Example" data-asset="3158" /></a></figure>
<p>In this case, you have two pages in your application&rsquo;s layout. Each page is represented by a <code>QWidget</code> object. When you select a new page in the combo box on the top of the window, the layout changes to show the selected page.</p>
<div class="alert alert-primary" role="alert">
<p><strong>Note:</strong> PyQt provides a convenient class called <a href="https://doc.qt.io/qt-5/qstackedwidget.html"><code>QStackedWidget</code></a>, which is built on top of <code>QStackedLayout</code>. You can also use this class to create multipage layouts.</p>
<p>This class provides a stack of widgets in which only one widget is visible at a time. Just like stacked layouts, <code>QStackedWidget</code> doesn&rsquo;t provide an intrinsic mechanism for switching between pages.</p>
</div>
<p>Besides stacked layout and stacked widget, you can use <a href="https://doc.qt.io/qt-5/qtabwidget.html"><code>QTabWidget</code></a> to create a multipage user interface. You&rsquo;ll learn how in the next section.</p>
<div><div class="rounded border border-light" style="display:block;position:relative;"><div style="display:block;width:100%;padding-top:12.5%;"></div><div class="rpad rounded border" data-unit="8x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"></div></div><a class="small text-muted" href="/account/join/" rel="nofollow"><i aria-hidden="true" class="fa fa-info-circle"> </i> Remove ads</a></div></section><section class="section3" id="using-pyqts-tab-widgets"><h3>Using PyQt&rsquo;s Tab Widgets<a class="headerlink" href="#using-pyqts-tab-widgets" title="Permanent link"></a></h3>
<p>Another popular way of creating multipage arrangements in PyQt is by using a class called <strong><code>QTabWidget</code></strong>. This class provides a <strong>tab bar</strong> and a <strong>page area</strong>. You use the tab bar to switch between pages and the page area to display the page associated with the selected tab. </p>
<p>The tab bar is located at the top of the page area by default. However, you can change this behavior using <a href="https://doc.qt.io/qt-5/qtabwidget.html#tabPosition-prop"><code>.setTabPosition()</code></a> and one of four possible <a href="https://doc.qt.io/qt-5/qtabwidget.html#TabPosition-enum">tab positions</a>:</p>
<div class="table-responsive">
<table class="table table-hover">
<thead>
<tr>
<th>Tab Position</th>
<th>Tab Bar Location</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>QTabWidget.North</code></td>
<td>Top of the pages</td>
</tr>
<tr>
<td><code>QTabWidget.South</code></td>
<td>Bottom of the pages</td>
</tr>
<tr>
<td><code>QTabWidget.West</code></td>
<td>Left of the pages</td>
</tr>
<tr>
<td><code>QTabWidget.East</code></td>
<td>Right of the pages</td>
</tr>
</tbody>
</table>
</div>
<p>To add tabs to a tab widget, you use <code>.addTab()</code>. This method has two variations, or overloaded implementations:</p>
<ol>
<li><code>.addTab(page, label)</code></li>
<li><code>.addTab(page, icon, label)</code></li>
</ol>
<p>In both cases, the method adds a new tab, with <code>label</code> as the tab&rsquo;s title. <code>page</code> needs to be a widget representing the page associated with the tab at hand.</p>
<p>In the second variation of the method, <code>icon</code> needs to be a <a href="https://www.riverbankcomputing.com/static/Docs/PyQt5/api/qtgui/qicon.html#"><code>QIcon</code></a> object. If you pass an icon to <code>.addTab()</code>, then that icon will be shown to the left of the tab&rsquo;s title.</p>
<p>A common practice when creating tab widgets is to use a <code>QWidget</code> object for each page. This way, you&rsquo;ll be able to add extra widgets to the page using a layout containing the required widgets.</p>
<p>Most of the time, you&rsquo;ll use tab widgets to create dialogs for your GUI applications. This kind of layout allows you to present the user with several options in a relatively small space. You can also take advantage of the tab system to organize your options according to some classification criteria.</p>
<p>Here&rsquo;s a sample application that shows the basics of how to create and use a <code>QTabWidget</code> object:</p>
<div class="highlight python"><pre><span></span><code><span class="linenos"> 1</span><span class="kn">import</span> <span class="nn">sys</span>
<span class="linenos"> 2</span>
<span class="linenos"> 3</span><span class="kn">from</span> <span class="nn">PyQt5.QtWidgets</span> <span class="kn">import</span> <span class="p">(</span>
<span class="linenos"> 4</span>    <span class="n">QApplication</span><span class="p">,</span>
<span class="linenos"> 5</span>    <span class="n">QCheckBox</span><span class="p">,</span>
<span class="linenos"> 6</span>    <span class="n">QTabWidget</span><span class="p">,</span>
<span class="linenos"> 7</span>    <span class="n">QVBoxLayout</span><span class="p">,</span>
<span class="linenos"> 8</span>    <span class="n">QWidget</span><span class="p">,</span>
<span class="linenos"> 9</span><span class="p">)</span>
<span class="linenos">10</span>
<span class="linenos">11</span><span class="k">class</span> <span class="nc">Window</span><span class="p">(</span><span class="n">QWidget</span><span class="p">):</span>
<span class="linenos">12</span>    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="linenos">13</span>        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">()</span>
<span class="linenos">14</span>        <span class="bp">self</span><span class="o">.</span><span class="n">setWindowTitle</span><span class="p">(</span><span class="s2">&quot;QTabWidget Example&quot;</span><span class="p">)</span>
<span class="linenos">15</span>        <span class="bp">self</span><span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="mi">270</span><span class="p">,</span> <span class="mi">110</span><span class="p">)</span>
<span class="linenos">16</span>        <span class="c1"># Create a top-level layout</span>
<span class="linenos">17</span>        <span class="n">layout</span> <span class="o">=</span> <span class="n">QVBoxLayout</span><span class="p">()</span>
<span class="linenos">18</span>        <span class="bp">self</span><span class="o">.</span><span class="n">setLayout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
<span class="linenos">19</span>        <span class="c1"># Create the tab widget with two tabs</span>
<span class="linenos">20</span><span class="hll">        <span class="n">tabs</span> <span class="o">=</span> <span class="n">QTabWidget</span><span class="p">()</span>
</span><span class="linenos">21</span><span class="hll">        <span class="n">tabs</span><span class="o">.</span><span class="n">addTab</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">generalTabUI</span><span class="p">(),</span> <span class="s2">&quot;General&quot;</span><span class="p">)</span>
</span><span class="linenos">22</span><span class="hll">        <span class="n">tabs</span><span class="o">.</span><span class="n">addTab</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">networkTabUI</span><span class="p">(),</span> <span class="s2">&quot;Network&quot;</span><span class="p">)</span>
</span><span class="linenos">23</span>        <span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="n">tabs</span><span class="p">)</span>
<span class="linenos">24</span>
<span class="linenos">25</span><span class="hll">    <span class="k">def</span> <span class="nf">generalTabUI</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="linenos">26</span>        <span class="sd">&quot;&quot;&quot;Create the General page UI.&quot;&quot;&quot;</span>
<span class="linenos">27</span>        <span class="n">generalTab</span> <span class="o">=</span> <span class="n">QWidget</span><span class="p">()</span>
<span class="linenos">28</span>        <span class="n">layout</span> <span class="o">=</span> <span class="n">QVBoxLayout</span><span class="p">()</span>
<span class="linenos">29</span>        <span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="n">QCheckBox</span><span class="p">(</span><span class="s2">&quot;General Option 1&quot;</span><span class="p">))</span>
<span class="linenos">30</span>        <span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="n">QCheckBox</span><span class="p">(</span><span class="s2">&quot;General Option 2&quot;</span><span class="p">))</span>
<span class="linenos">31</span>        <span class="n">generalTab</span><span class="o">.</span><span class="n">setLayout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
<span class="linenos">32</span>        <span class="k">return</span> <span class="n">generalTab</span>
<span class="linenos">33</span>
<span class="linenos">34</span><span class="hll">    <span class="k">def</span> <span class="nf">networkTabUI</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="linenos">35</span>        <span class="sd">&quot;&quot;&quot;Create the Network page UI.&quot;&quot;&quot;</span>
<span class="linenos">36</span>        <span class="n">networkTab</span> <span class="o">=</span> <span class="n">QWidget</span><span class="p">()</span>
<span class="linenos">37</span>        <span class="n">layout</span> <span class="o">=</span> <span class="n">QVBoxLayout</span><span class="p">()</span>
<span class="linenos">38</span>        <span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="n">QCheckBox</span><span class="p">(</span><span class="s2">&quot;Network Option 1&quot;</span><span class="p">))</span>
<span class="linenos">39</span>        <span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="n">QCheckBox</span><span class="p">(</span><span class="s2">&quot;Network Option 2&quot;</span><span class="p">))</span>
<span class="linenos">40</span>        <span class="n">networkTab</span><span class="o">.</span><span class="n">setLayout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
<span class="linenos">41</span>        <span class="k">return</span> <span class="n">networkTab</span>
<span class="linenos">42</span>
<span class="linenos">43</span><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>
<span class="linenos">44</span>    <span class="n">app</span> <span class="o">=</span> <span class="n">QApplication</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span>
<span class="linenos">45</span>    <span class="n">window</span> <span class="o">=</span> <span class="n">Window</span><span class="p">()</span>
<span class="linenos">46</span>    <span class="n">window</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
<span class="linenos">47</span>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="n">app</span><span class="o">.</span><span class="n">exec_</span><span class="p">())</span>
</code></pre></div>
<p>In this example, you use a tab widget to present the user with a concise dialog that shows options related to the <em>General</em> and <em>Network</em> sections of a hypothetical preferences menu. On line 20, you create the <code>QTabWidget</code> object. Then you add two tabs to the tab widget using <code>.addTab()</code>.</p>
<p>In <code>.generalTabUI()</code> and <code>networkTabUI()</code>, you create the specific GUI for each tab. To do this, you use a <code>QWidget</code> object, a <code>QVBoxLayout</code> object, and some checkboxes to hold the options.</p>
<p>If you run the application now, then you&rsquo;ll get the following dialog on your screen:</p>
<figure class="js-lightbox"><a href="https://files.realpython.com/media/QTabWidget-Example.1fc75e4e9137.gif" target="_blank"><img loading="lazy" class="img-fluid mx-auto d-block " src="https://files.realpython.com/media/QTabWidget-Example.1fc75e4e9137.gif" width="297" height="176" srcset="https://files.realpython.com/media/QTabWidget-Example.1fc75e4e9137.gif 74w, https://files.realpython.com/media/QTabWidget-Example.1fc75e4e9137.gif 148w, https://files.realpython.com/media/QTabWidget-Example.1fc75e4e9137.gif 297w" sizes="75vw" alt="QTabWidget Example" data-asset="3159" /></a></figure>
<p>That&rsquo;s it! You have a fully functional tab-based GUI. Note that to switch between pages, you just need to click the corresponding tab.</p>
</section></section><section class="section2" id="laying-out-the-applications-main-window"><h2>Laying Out the Application&rsquo;s Main Window<a class="headerlink" href="#laying-out-the-applications-main-window" title="Permanent link"></a></h2>
<p>If you&rsquo;re using PyQt to create your GUI applications, then most of the time you&rsquo;ll use <a href="https://doc.qt.io/qt-5/qmainwindow.html"><code>QMainWindow</code></a> to create a GUI on top of it. This class allows you to create <a href="https://realpython.com/python-pyqt-gui-calculator/#main-windows">main window&ndash;style applications</a>. <code>QMainWindow</code> ships with its own <a href="https://doc.qt.io/qt-5/qmainwindow.html#qt-main-window-framework">predefined layout</a>. This layout will allow you to add the following graphical components to your main window:</p>
<ul>
<li>A <a href="https://realpython.com/python-menus-toolbars/#creating-menu-bars">menu bar</a> at the top of the window</li>
<li>One or more <a href="https://realpython.com/python-menus-toolbars/#creating-toolbars">toolbars</a> at any of the four sides of the window</li>
<li>A <a href="https://realpython.com/python-menus-toolbars/#building-python-status-bars-in-pyqt">status bar</a> at the bottom of the window</li>
<li>One or more <a href="https://doc.qt.io/qt-5/qdockwidget.html">dock widgets</a> at any of the four sides of the window (but without occupying the toolbars area)</li>
<li>A <a href="https://doc.qt.io/qt-5/qmainwindow.html#setCentralWidget">central widget</a> at the very center of the window</li>
</ul>
<p>For most applications, all these graphical components are optional except for the central widget, which is required to make your application work.</p>
<div class="alert alert-primary" role="alert">
<p><strong>Note:</strong> If you&rsquo;re creating GUI applications using <code>QMainWindow</code>, then you <em>must</em> have a central widget, even if it&rsquo;s just a placeholder.</p>
</div>
<p>Some applications use a unique and fully functional widget as their central widget. For example, if you&rsquo;re coding a text editor, then you&rsquo;ll likely use a <a href="https://doc.qt.io/qt-5/qtextedit.html"><code>QTextEdit</code></a> object as your editor&rsquo;s central widget.</p>
<p>Other kinds of GUI applications might require a more elaborate central widget. In that case, you can use a <code>QWidget</code> object as your central widget and then create a layout containing the specific widget arrangement that you need for your application&rsquo;s GUI. The final step is to set that layout as your central widget&rsquo;s layout.</p>
<p>Most of the time, the layout that <code>QMainWindow</code> offers is enough to create any kind of GUI application. This layout will effectively manage the behavior of the widgets on the window, so you don&rsquo;t have to worry about that.</p>
<div><div class="rounded border border-light" style="display:block;position:relative;"><div style="display:block;width:100%;padding-top:12.5%;"></div><div class="rpad rounded border" data-unit="8x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"></div></div><a class="small text-muted" href="/account/join/" rel="nofollow"><i aria-hidden="true" class="fa fa-info-circle"> </i> Remove ads</a></div></section><section class="section2" id="laying-out-the-applications-dialogs"><h2>Laying Out the Application&rsquo;s Dialogs<a class="headerlink" href="#laying-out-the-applications-dialogs" title="Permanent link"></a></h2>
<p>GUI applications are commonly built using a main window and one or more <strong>dialogs</strong>. <a href="https://en.wikipedia.org/wiki/Dialog_box">Dialogs</a> are small windows that allow you to communicate with your users. PyQt provides <a href="https://doc.qt.io/qt-5/qdialog.html"><code>QDialog</code></a> to handle the creation of dialogs.</p>
<p>Unlike <code>QMainWindow</code>, <code>QDialog</code> doesn&rsquo;t have a predefined or default top-level layout. That&rsquo;s because dialogs can be quite varied and include a wide range of widget arrangements and combinations.</p>
<p>Once you place all the widgets on a dialog&rsquo;s GUI, you need to set a top-level layout on that dialog. To do this, you have to call <code>.setLayout()</code> on the dialog object just like you&rsquo;d do with any other widget.</p>
<p>Here&rsquo;s a <a href="https://realpython.com/python-pyqt-gui-calculator/#dialogs">dialog-style application</a> that shows how to set a top-level layout to a <code>QDialog</code> object:</p>
<div class="highlight python"><pre><span></span><code><span class="linenos"> 1</span><span class="kn">import</span> <span class="nn">sys</span>
<span class="linenos"> 2</span>
<span class="linenos"> 3</span><span class="kn">from</span> <span class="nn">PyQt5.QtWidgets</span> <span class="kn">import</span> <span class="p">(</span>
<span class="linenos"> 4</span>    <span class="n">QApplication</span><span class="p">,</span>
<span class="linenos"> 5</span>    <span class="n">QDialog</span><span class="p">,</span>
<span class="linenos"> 6</span>    <span class="n">QDialogButtonBox</span><span class="p">,</span>
<span class="linenos"> 7</span>    <span class="n">QFormLayout</span><span class="p">,</span>
<span class="linenos"> 8</span>    <span class="n">QLineEdit</span><span class="p">,</span>
<span class="linenos"> 9</span>    <span class="n">QVBoxLayout</span><span class="p">,</span>
<span class="linenos">10</span><span class="p">)</span>
<span class="linenos">11</span>
<span class="linenos">12</span><span class="k">class</span> <span class="nc">Dialog</span><span class="p">(</span><span class="n">QDialog</span><span class="p">):</span>
<span class="linenos">13</span>    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="linenos">14</span>        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">()</span>
<span class="linenos">15</span>        <span class="bp">self</span><span class="o">.</span><span class="n">setWindowTitle</span><span class="p">(</span><span class="s2">&quot;QDialog&#39;s Top-Level Layout Example&quot;</span><span class="p">)</span>
<span class="linenos">16</span><span class="hll">        <span class="n">dlgLayout</span> <span class="o">=</span> <span class="n">QVBoxLayout</span><span class="p">()</span>
</span><span class="linenos">17</span>        <span class="c1"># Create a form layout and add widgets</span>
<span class="linenos">18</span><span class="hll">        <span class="n">formLayout</span> <span class="o">=</span> <span class="n">QFormLayout</span><span class="p">()</span>
</span><span class="linenos">19</span><span class="hll">        <span class="n">formLayout</span><span class="o">.</span><span class="n">addRow</span><span class="p">(</span><span class="s2">&quot;Name:&quot;</span><span class="p">,</span> <span class="n">QLineEdit</span><span class="p">())</span>
</span><span class="linenos">20</span><span class="hll">        <span class="n">formLayout</span><span class="o">.</span><span class="n">addRow</span><span class="p">(</span><span class="s2">&quot;Job:&quot;</span><span class="p">,</span> <span class="n">QLineEdit</span><span class="p">())</span>
</span><span class="linenos">21</span><span class="hll">        <span class="n">formLayout</span><span class="o">.</span><span class="n">addRow</span><span class="p">(</span><span class="s2">&quot;Email:&quot;</span><span class="p">,</span> <span class="n">QLineEdit</span><span class="p">())</span>
</span><span class="linenos">22</span>        <span class="c1"># Add a button box</span>
<span class="linenos">23</span>        <span class="n">btnBox</span> <span class="o">=</span> <span class="n">QDialogButtonBox</span><span class="p">()</span>
<span class="linenos">24</span>        <span class="n">btnBox</span><span class="o">.</span><span class="n">setStandardButtons</span><span class="p">(</span>
<span class="linenos">25</span>            <span class="n">QDialogButtonBox</span><span class="o">.</span><span class="n">Ok</span> <span class="o">|</span> <span class="n">QDialogButtonBox</span><span class="o">.</span><span class="n">Cancel</span>
<span class="linenos">26</span>        <span class="p">)</span>
<span class="linenos">27</span>        <span class="c1"># Set the layout on the dialog</span>
<span class="linenos">28</span><span class="hll">        <span class="n">dlgLayout</span><span class="o">.</span><span class="n">addLayout</span><span class="p">(</span><span class="n">formLayout</span><span class="p">)</span>
</span><span class="linenos">29</span><span class="hll">        <span class="n">dlgLayout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="n">btnBox</span><span class="p">)</span>
</span><span class="linenos">30</span><span class="hll">        <span class="bp">self</span><span class="o">.</span><span class="n">setLayout</span><span class="p">(</span><span class="n">dlgLayout</span><span class="p">)</span>
</span><span class="linenos">31</span>
<span class="linenos">32</span><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>
<span class="linenos">33</span>    <span class="n">app</span> <span class="o">=</span> <span class="n">QApplication</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span>
<span class="linenos">34</span>    <span class="n">dlg</span> <span class="o">=</span> <span class="n">Dialog</span><span class="p">()</span>
<span class="linenos">35</span>    <span class="n">dlg</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
<span class="linenos">36</span>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="n">app</span><span class="o">.</span><span class="n">exec_</span><span class="p">())</span>
</code></pre></div>
<p>In this case, the application&rsquo;s window inherits from <code>QDialog</code>, so you have a dialog-style application. On line 16, you create the layout that you&rsquo;ll use as the dialog&rsquo;s top-level layout. On lines 18 to 21, you create a form layout to arrange some widgets in a form.</p>
<p>On line 24, you add a <a href="https://doc.qt.io/qt-5/qdialogbuttonbox.html"><code>QDialogButtonBox</code></a> object. You&rsquo;ll often use <code>QDialogButtonBox</code> to handle the buttons on a dialog. In this example, you use two buttons, an <em>Ok</em> button and a <em>Cancel</em> button. These buttons won&rsquo;t have any functionality&mdash;they&rsquo;re just intended to make the dialog more realistic.</p>
<p>Once you have all the widgets and layouts in place, you can add them to the top-level layout. That&rsquo;s what you do on lines 28 and 29. The final step, on line 30, is to set the top-level layout as your dialog&rsquo;s layout using <code>.setLayout()</code>.</p>
<p>If you run this application, then you&rsquo;ll see the following window on your screen:</p>
<figure class="js-lightbox"><a href="https://files.realpython.com/media/QDialog-Top-Level-Layout-Example.21b913e57394.png" target="_blank"><img loading="lazy" class="img-fluid mx-auto d-block " src="https://files.realpython.com/media/QDialog-Top-Level-Layout-Example.21b913e57394.png" width="296" height="169" srcset="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/QDialog-Top-Level-Layout-Example.21b913e57394.png&amp;w=74&amp;sig=ca14178e56259673a9eb2b24c5d130fbe432603e 74w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/QDialog-Top-Level-Layout-Example.21b913e57394.png&amp;w=148&amp;sig=81db638e1f6b5cd4a7deb2ae47af11c09ec944cb 148w, https://files.realpython.com/media/QDialog-Top-Level-Layout-Example.21b913e57394.png 296w" sizes="75vw" alt="QDialog Top-Level Layout Example" data-asset="3160" /></a></figure>
<p>It&rsquo;s a best practice to set a top-level layout for all your dialogs. This ensures that the dialog&rsquo;s GUI will behave coherently when the user resizes the underlying window. Otherwise, your dialogs could appear disorganized and unpolished in the user&rsquo;s eyes.</p>
</section><section class="section2" id="managing-space-in-a-pyqt-layout"><h2>Managing Space in a PyQt Layout<a class="headerlink" href="#managing-space-in-a-pyqt-layout" title="Permanent link"></a></h2>
<p>When it comes to using PyQt&rsquo;s layout managers to arrange the widgets on a window or form, managing space&mdash;empty space, space between widgets, and so on&mdash;is a common issue. Being able to manage this space is an important skill to have.</p>
<p>Internally, layouts manage the available space on a window using some of the following widget properties:</p>
<ul>
<li><a href="https://doc.qt.io/qt-5/qwidget.html#sizeHint-prop"><code>.sizeHint()</code></a> contains the widget&rsquo;s recommended size</li>
<li><a href="https://doc.qt.io/qt-5/qwidget.html#minimumSizeHint-prop"><code>.minimumSizeHint()</code></a> contains the smallest size the widget can have while remaining usable</li>
<li><a href="https://doc.qt.io/qt-5/qwidget.html#sizePolicy-prop"><code>.sizePolicy()</code></a> holds the default behavior of a widget in a layout</li>
</ul>
<p>Layouts use these properties to automatically position and resize widgets, assigning a given amount of space to each widget according to the available space. This ensures that widgets are consistently arranged and remain usable.</p>
<p>In the next three sections, you&rsquo;ll learn how the different types of layouts manage space in PyQt.</p>
<section class="section3" id="managing-space-in-box-layouts"><h3>Managing Space in Box Layouts<a class="headerlink" href="#managing-space-in-box-layouts" title="Permanent link"></a></h3>
<p>Box layouts do a great job when it comes to distributing available space between widgets. However, sometime their default behavior isn&rsquo;t enough, and you need to manually handle the available space. To help you out in this situation, PyQt provides <a href="https://doc.qt.io/qt-5/qspaceritem.html"><code>QSpacerItem</code></a>. This class allows you to add blank space (or empty boxes) to a box layout.</p>
<p>Normally, you don&rsquo;t need to use <code>QSpacerItem</code> directly. Instead, you call some of the following methods on your box layout objects:</p>
<ul>
<li>
<p><strong><code>.addSpacing(i)</code></strong> adds a non-stretchable space (or empty box) of fixed size <code>i</code> to the layout. <code>i</code> must be an integer representing the size of the space in pixels.</p>
</li>
<li>
<p><strong><code>.addStretch(i)</code></strong> adds a stretchable space with a minimum size of <code>0</code> and a stretch factor <code>i</code> to a box layout. <code>i</code> must be an integer.</p>
</li>
<li>
<p><strong><code>.insertSpacing(index, size)</code></strong> inserts a non-stretchable space at position <code>index</code>, with size <code>size</code>. If <code>index</code> is negative, then the space is added at the end of the box layout.</p>
</li>
<li>
<p><strong><code>insertStretch(index, stretch)</code></strong> inserts a stretchable space at position <code>index</code>, with a minimum size of <code>0</code> and a stretch factor of <code>stretch</code>. If <code>index</code> is negative, then the space is added at the end of the box layout.</p>
</li>
</ul>
<p><strong>Stretchable spacers</strong> will expand or shrink to fill empty space when the user resizes the underlying window. <strong>Non-stretchable spacers</strong> will remain the same size regardless of the changes in the size of the underlying window.</p>
<p>Go back to the example of how to use vertical layouts and run that application again. If you pull down the border of the window, then you&rsquo;ll notice that more space appears between the buttons the further down you pull:</p>
<figure class="js-lightbox"><a href="https://files.realpython.com/media/Non-Stretchable-Spacer-Example.0791b15beed0.gif" target="_blank"><img loading="lazy" class="img-fluid mx-auto d-block " src="https://files.realpython.com/media/Non-Stretchable-Spacer-Example.0791b15beed0.gif" width="288" height="330" srcset="https://files.realpython.com/media/Non-Stretchable-Spacer-Example.0791b15beed0.gif 72w, https://files.realpython.com/media/Non-Stretchable-Spacer-Example.0791b15beed0.gif 144w, https://files.realpython.com/media/Non-Stretchable-Spacer-Example.0791b15beed0.gif 288w" sizes="75vw" alt="Non Stretchable Spacer Example" data-asset="3161" /></a></figure>
<p>This happens because the layout handles the newly available space by automatically expanding its boxes. You can change this behavior by adding a stretchable <code>QSpacerItem</code> object to the end of the layout.</p>
<p>In your example&rsquo;s code, update the initializer of <code>Window</code> as follows:</p>
<div class="highlight python"><pre><span></span><code><span class="k">class</span> <span class="nc">Window</span><span class="p">(</span><span class="n">QWidget</span><span class="p">):</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">setWindowTitle</span><span class="p">(</span><span class="s2">&quot;QVBoxLayout Example&quot;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="mi">270</span><span class="p">,</span> <span class="mi">110</span><span class="p">)</span>
        <span class="c1"># Create a QVBoxLayout instance</span>
        <span class="n">layout</span> <span class="o">=</span> <span class="n">QVBoxLayout</span><span class="p">()</span>
        <span class="c1"># Add widgets to the layout</span>
        <span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="n">QPushButton</span><span class="p">(</span><span class="s2">&quot;Top&quot;</span><span class="p">))</span>
        <span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="n">QPushButton</span><span class="p">(</span><span class="s2">&quot;Center&quot;</span><span class="p">))</span>
        <span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="n">QPushButton</span><span class="p">(</span><span class="s2">&quot;Bottom&quot;</span><span class="p">))</span>
<span class="hll">        <span class="n">layout</span><span class="o">.</span><span class="n">addStretch</span><span class="p">()</span>
</span>        <span class="c1"># Set the layout on the application&#39;s window</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">setLayout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
</code></pre></div>
<p>In the highlighted line, you add a stretchable <code>QSpacerItem</code> object to the end of the layout by calling <code>.addStretch()</code> on the layout. If you run the application again, then you&rsquo;ll get the following behavior:</p>
<figure class="js-lightbox"><a href="https://files.realpython.com/media/Stretchable-Spacer-Example.13550e483950.gif" target="_blank"><img loading="lazy" class="img-fluid mx-auto d-block " src="https://files.realpython.com/media/Stretchable-Spacer-Example.13550e483950.gif" width="288" height="330" srcset="https://files.realpython.com/media/Stretchable-Spacer-Example.13550e483950.gif 72w, https://files.realpython.com/media/Stretchable-Spacer-Example.13550e483950.gif 144w, https://files.realpython.com/media/Stretchable-Spacer-Example.13550e483950.gif 288w" sizes="75vw" alt="Stretchable Spacer Example" data-asset="3162" /></a></figure>
<p>Now all the extra space is automatically assigned to the stretchable <code>QSpacerItem</code> object at the bottom of the layout without affecting the position or size of the rest of the widgets. You can use this and other space management techniques to make your GUI applications look good and polished.</p>
<div><div class="rounded border border-light" style="display:block;position:relative;"><div style="display:block;width:100%;padding-top:12.5%;"></div><div class="rpad rounded border" data-unit="8x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"></div></div><a class="small text-muted" href="/account/join/" rel="nofollow"><i aria-hidden="true" class="fa fa-info-circle"> </i> Remove ads</a></div></section><section class="section3" id="managing-space-in-grid-and-form-layouts"><h3>Managing Space in Grid and Form Layouts<a class="headerlink" href="#managing-space-in-grid-and-form-layouts" title="Permanent link"></a></h3>
<p>Grid and form layouts handle available space in a different way. In these types of layouts, you can handle only the vertical and horizontal space between widgets. These layouts provide three methods to manage these spaces:</p>
<ol>
<li><strong><code>setSpacing(spacing)</code></strong> sets both the vertical and the horizontal spacing between widgets to <code>spacing</code>.</li>
<li><strong><code>setVerticalSpacing(spacing)</code></strong> sets only the vertical spacing between widgets in the layout to <code>spacing</code>.</li>
<li><strong><code>setHorizontalSpacing(spacing)</code></strong> sets only the horizontal spacing between widgets in the layout to <code>spacing</code>.</li>
</ol>
<p>In all cases, <code>spacing</code> is an integer representing pixels. Now go back to the example on how to create a form layout and update the initializer of <code>Window</code> like this:</p>
<div class="highlight python"><pre><span></span><code><span class="k">class</span> <span class="nc">Window</span><span class="p">(</span><span class="n">QWidget</span><span class="p">):</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">setWindowTitle</span><span class="p">(</span><span class="s2">&quot;QFormLayout Example&quot;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="mi">270</span><span class="p">,</span> <span class="mi">110</span><span class="p">)</span>
        <span class="c1"># Create a QHBoxLayout instance</span>
        <span class="n">layout</span> <span class="o">=</span> <span class="n">QFormLayout</span><span class="p">()</span>
        <span class="c1"># Add widgets to the layout</span>
<span class="hll">        <span class="n">layout</span><span class="o">.</span><span class="n">setVerticalSpacing</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span>
</span>        <span class="n">layout</span><span class="o">.</span><span class="n">addRow</span><span class="p">(</span><span class="s2">&quot;Name:&quot;</span><span class="p">,</span> <span class="n">QLineEdit</span><span class="p">())</span>
        <span class="n">layout</span><span class="o">.</span><span class="n">addRow</span><span class="p">(</span><span class="s2">&quot;Job:&quot;</span><span class="p">,</span> <span class="n">QLineEdit</span><span class="p">())</span>
        <span class="n">emailLabel</span> <span class="o">=</span> <span class="n">QLabel</span><span class="p">(</span><span class="s2">&quot;Email:&quot;</span><span class="p">)</span>
        <span class="n">layout</span><span class="o">.</span><span class="n">addRow</span><span class="p">(</span><span class="n">emailLabel</span><span class="p">,</span> <span class="n">QLineEdit</span><span class="p">())</span>
        <span class="c1"># Set the layout on the application&#39;s window</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">setLayout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
</code></pre></div>
<p>In the highlighted line, you set the vertical space between widgets to <code>30</code> pixels. If you run the application again, then you&rsquo;ll see the following window:</p>
<figure class="js-lightbox"><a href="https://files.realpython.com/media/QFormLayout-Spacing-Example.79063ae9d18e.png" target="_blank"><img loading="lazy" class="img-fluid mx-auto d-block " src="https://files.realpython.com/media/QFormLayout-Spacing-Example.79063ae9d18e.png" width="272" height="179" srcset="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/QFormLayout-Spacing-Example.79063ae9d18e.png&amp;w=68&amp;sig=054fc91a3fa270f8083921a2177bd10164f72a00 68w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/QFormLayout-Spacing-Example.79063ae9d18e.png&amp;w=136&amp;sig=ddd8e4817c94aabf46bc133f31722184d247b362 136w, https://files.realpython.com/media/QFormLayout-Spacing-Example.79063ae9d18e.png 272w" sizes="75vw" alt="QFormLayout Spacing Example" data-asset="3227" /></a></figure>
<p>Now there&rsquo;s more space between the rows of widgets. You can also try modifying the example of how to use a grid layout by adding some vertical or horizontal space just to see how all these spacing mechanisms work.</p>
</section></section><section class="section2" id="conclusion"><h2>Conclusion<a class="headerlink" href="#conclusion" title="Permanent link"></a></h2>
<p>Creating high-quality <a href="https://realpython.com/learning-paths/python-gui-programming/">GUI applications</a> requires laying out all the graphical components in a coherent and polished arrangement. In PyQt, an effective way of doing that is to use PyQt&rsquo;s <strong>layout managers</strong>, which provide a user-friendly and productive way of approaching this task.</p>
<p><strong>In this tutorial, you&rsquo;ve learned:</strong></p>
<ul>
<li>What the <strong>benefits</strong> are of properly laying out the widgets on a GUI</li>
<li>How to programmatically arrange widgets using PyQt&rsquo;s built-in <strong>layout managers</strong> </li>
<li>Which layout manager to use for your specific <strong>use case</strong></li>
<li>How to lay out <strong>main window&ndash;style</strong> and <strong>dialog-style</strong> applications in PyQt</li>
</ul>
<p>With this knowledge, you&rsquo;ll be able to create good-looking and professional GUI applications using PyQt&rsquo;s built-in layouts.</p>
</section>
<div class="text-center my-3">
<div class="jsCompletionStatusWidget btn-group mb-0">
<button title="Click to mark as completed" class="jsBtnCompletion btn btn-secondary border-right " style="border-top-right-radius: 0; border-bottom-right-radius: 0;" disabled>Mark as Completed</button>
<button title="Add bookmark" class="jsBtnBookmark btn btn-secondary border-left" disabled><i class="fa fa-fw fa-bookmark-o"></i></button>
</div>
</div>
<div class="border rounded p-3 card mb-2">
<p class="mb-0"><span class="badge badge-pill badge-success"><i class="fa fa-play-circle" aria-hidden="true"></i> Watch Now</span> This tutorial has a related video course created by the Real Python team. Watch it together with the written tutorial to deepen your understanding: <a class="stretched-link text-success" href="/courses/creating-pyqt-layouts-gui-applications/"><strong>Creating PyQt Layouts for GUI Applications</strong></a></p>
</div>
</div>
<div class="card mt-4 mb-4 bg-secondary">
<p class="card-header h3 text-center bg-light">🐍 Python Tricks 💌</p>
<div class="card-body">
<div class="container">
<div class="row">
<div class="col-xs-12 col-sm-7">
<p>Get a short &amp; sweet <strong>Python Trick</strong> delivered to your inbox every couple of days. No spam ever. Unsubscribe any time. Curated by the Real Python team.</p>
</div>
<div class="col-xs-12 col-sm-5">
<img class="img-fluid rounded mb-3" src="https://cdn.realpython.com/static/pytrick-dict-merge.4201a0125a5e.png" width="738" height="490" alt="Python Tricks Dictionary Merge">
</div>
</div>
<div class="row mb-3">
<form class="col-12" action="/optins/process/" method="post">
<input type="hidden" name="csrfmiddlewaretoken" value="CDgbsOgYhiA1qB7IS36e6LHeg0QPxlDYQYl0NExZ5qQNYf9xttTFxbKLsVcwhX3y">
<input type="hidden" name="slug" value="static-python-tricks-footer">
<div class="form-group">
<input name="email" type="email" class="form-control form-control-lg" placeholder="Email Address" required>
</div>
<button name="submit" type="submit" class="btn btn-primary btn-lg btn-block">Send Me Python Tricks »</button>
</form>
</div>
</div>
</div>
</div>
<div class="card mt-3" id="author">
<p class="card-header h3">About <strong>Leodanis Pozo Ramos</strong></p>
<div class="card-body">
<div class="container p-0">
<div class="row">
<div class="col-12 col-md-3 align-self-center">
<a href="/team/lpozoramos/"><img loading="lazy" src="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/Perfil_final1.9f896bc212f6.jpg&amp;w=862&amp;h=862&amp;mode=crop&amp;sig=2d089ce1d1dc031cba6526fec6773d79fd0495d8" srcset="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/Perfil_final1.9f896bc212f6.jpg&amp;w=215&amp;h=215&amp;mode=crop&amp;sig=d5445576454e66fffb8c54c94a51779f114f6d98 215w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/Perfil_final1.9f896bc212f6.jpg&amp;w=431&amp;h=431&amp;mode=crop&amp;sig=09e05527710aa4fc68ca8cc43070c43c6aa15011 431w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/Perfil_final1.9f896bc212f6.jpg&amp;w=862&amp;h=862&amp;mode=crop&amp;sig=2d089ce1d1dc031cba6526fec6773d79fd0495d8 862w" sizes="25vw" width="862" height="862" class="d-block d-md-none rounded-circle img-fluid w-33 mb-0 mx-auto" alt="Leodanis Pozo Ramos"></a>
<a href="/team/lpozoramos/"><img loading="lazy" src="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/Perfil_final1.9f896bc212f6.jpg&amp;w=862&amp;h=862&amp;mode=crop&amp;sig=2d089ce1d1dc031cba6526fec6773d79fd0495d8" srcset="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/Perfil_final1.9f896bc212f6.jpg&amp;w=215&amp;h=215&amp;mode=crop&amp;sig=d5445576454e66fffb8c54c94a51779f114f6d98 215w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/Perfil_final1.9f896bc212f6.jpg&amp;w=431&amp;h=431&amp;mode=crop&amp;sig=09e05527710aa4fc68ca8cc43070c43c6aa15011 431w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/Perfil_final1.9f896bc212f6.jpg&amp;w=862&amp;h=862&amp;mode=crop&amp;sig=2d089ce1d1dc031cba6526fec6773d79fd0495d8 862w" sizes="25vw" width="862" height="862" class="d-none d-md-block rounded-circle img-fluid w-100 mb-0" alt="Leodanis Pozo Ramos"></a>
</div>
<div class="col mt-3">
<p>Leodanis is an industrial engineer who loves Python and software development. He&#x27;s a self-taught Python developer with 6+ years of experience. He&#x27;s an avid technical writer with a growing number of articles published on Real Python and other sites.</p>
<a href="/team/lpozoramos/" class="card-link">» More about Leodanis</a>
</div>
</div>
</div>
</div>
<hr class="my-0">
<div class="card-body pb-0">
<div class="container">
<div class="row">
<p><em>Each tutorial at Real Python is created by a team of developers so that it meets our high quality standards. The team members who worked on this tutorial are:</em></p>
</div>
<div class="row align-items-center w-100 mx-auto">
<div class="col-4 col-sm-2 align-self-center">
<a href="/team/asantos/"><img loading="lazy" src="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/PP.9b8b026f75b8.jpg&amp;w=959&amp;h=959&amp;mode=crop&amp;sig=70bedc2eab90a227eb9a657c415689c3eb1eca4f" srcset="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/PP.9b8b026f75b8.jpg&amp;w=239&amp;h=239&amp;mode=crop&amp;sig=11667a6dd5c29e4c9363f18be59360551af5eddc 239w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/PP.9b8b026f75b8.jpg&amp;w=479&amp;h=479&amp;mode=crop&amp;sig=1541e1ec541357813def826d8507c0565164b701 479w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/PP.9b8b026f75b8.jpg&amp;w=959&amp;h=959&amp;mode=crop&amp;sig=70bedc2eab90a227eb9a657c415689c3eb1eca4f 959w" sizes="10vw" width="862" height="862" class="rounded-circle img-fluid w-100" alt="Aldren Santos"></a>
</div>
<div class="col pl-0 d-none d-sm-block">
<a href="/team/asantos/" class="card-link small"><p>Aldren</p></a>
</div>
<div class="col-4 col-sm-2 align-self-center">
<a href="/team/gahjelle/"><img loading="lazy" src="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/gahjelle.470149ee709e.jpg&amp;w=800&amp;h=800&amp;mode=crop&amp;sig=e9b761c6cf1359953014dba05554f5424eb116e1" srcset="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/gahjelle.470149ee709e.jpg&amp;w=200&amp;h=200&amp;mode=crop&amp;sig=c6390201e73d3e09429d73da5bb29c17ab10403a 200w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/gahjelle.470149ee709e.jpg&amp;w=400&amp;h=400&amp;mode=crop&amp;sig=fcea459ee24a7b320573cadee324cf75509dc1d6 400w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/gahjelle.470149ee709e.jpg&amp;w=800&amp;h=800&amp;mode=crop&amp;sig=e9b761c6cf1359953014dba05554f5424eb116e1 800w" sizes="10vw" width="862" height="862" class="rounded-circle img-fluid w-100" alt="Geir Arne Hjelle"></a>
</div>
<div class="col pl-0 d-none d-sm-block">
<a href="/team/gahjelle/" class="card-link small"><p>Geir Arne</p></a>
</div>
<div class="col-4 col-sm-2 align-self-center">
<a href="/team/jfincher/"><img loading="lazy" src="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/Running_headshot.b3e2d17c6828.jpg&amp;w=336&amp;h=336&amp;mode=crop&amp;sig=09dc92618a2d4703d7ce8ef1475aac7f722cb05a" srcset="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/Running_headshot.b3e2d17c6828.jpg&amp;w=84&amp;h=84&amp;mode=crop&amp;sig=9c97a472e6b6b215b38c6d93b5c59c2bacc6c590 84w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/Running_headshot.b3e2d17c6828.jpg&amp;w=168&amp;h=168&amp;mode=crop&amp;sig=62ddb6b400174c2bc0293e52b519d53280b03514 168w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/Running_headshot.b3e2d17c6828.jpg&amp;w=336&amp;h=336&amp;mode=crop&amp;sig=09dc92618a2d4703d7ce8ef1475aac7f722cb05a 336w" sizes="10vw" width="862" height="862" class="rounded-circle img-fluid w-100" alt="Jon Fincher"></a>
</div>
<div class="col pl-0 d-none d-sm-block">
<a href="/team/jfincher/" class="card-link small"><p>Jon</p></a>
</div>
</div>
<div class="row align-items-center w-100 mx-auto">
<div class="col-4 col-sm-2 align-self-center">
<a href="/team/jjablonski/"><img loading="lazy" src="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/jjablonksi-avatar.e37c4f83308e.jpg&amp;w=800&amp;h=800&amp;mode=crop&amp;sig=c363b704eeccb35f2247db13baff3d4383459858" srcset="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/jjablonksi-avatar.e37c4f83308e.jpg&amp;w=200&amp;h=200&amp;mode=crop&amp;sig=706b16de3cb88a8f353f4a98d7c7bc7234229bd0 200w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/jjablonksi-avatar.e37c4f83308e.jpg&amp;w=400&amp;h=400&amp;mode=crop&amp;sig=6d7aa672ca3f1ac5f7cd62ed1641b60f98d04d8b 400w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/jjablonksi-avatar.e37c4f83308e.jpg&amp;w=800&amp;h=800&amp;mode=crop&amp;sig=c363b704eeccb35f2247db13baff3d4383459858 800w" sizes="10vw" width="862" height="862" class="rounded-circle img-fluid w-100" alt="Joanna Jablonski"></a>
</div>
<div class="col pl-0 d-none d-sm-block">
<a href="/team/jjablonski/" class="card-link small"><p>Joanna</p></a>
</div>
<div class="col-4 col-sm-2 align-self-center">
<a href="/team/jschmitt/"><img loading="lazy" src="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/profile-small_js.2f4d0d8da1ca.jpg&amp;w=400&amp;h=400&amp;mode=crop&amp;sig=d10d9fc35ba4a6608969e71b4c24c1e61176ee2d" srcset="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/profile-small_js.2f4d0d8da1ca.jpg&amp;w=100&amp;h=100&amp;mode=crop&amp;sig=ef40d1115d3b4c306b16314b5555d5dc55361da9 100w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/profile-small_js.2f4d0d8da1ca.jpg&amp;w=200&amp;h=200&amp;mode=crop&amp;sig=e1df2f238effe79f5750fc75258642036de498c3 200w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/profile-small_js.2f4d0d8da1ca.jpg&amp;w=400&amp;h=400&amp;mode=crop&amp;sig=d10d9fc35ba4a6608969e71b4c24c1e61176ee2d 400w" sizes="10vw" width="862" height="862" class="rounded-circle img-fluid w-100" alt="Jacob Schmitt"></a>
</div>
<div class="col pl-0 d-none d-sm-block">
<a href="/team/jschmitt/" class="card-link small"><p>Jacob</p></a>
</div>
<div class="col-4 col-sm-2 align-self-center"></div>
<div class="col pl-0 d-none d-sm-block"></div>
</div>
</div>
</div>
</div>
<div class="bg-light rounded py-4 my-4 shadow shadow-sm mx-n2">
<div class="col-12 text-center d-block d-md-none">
<p class="h2 mb-3">Master <u><span class="marker-highlight">Real-World Python Skills</mark></u> With Unlimited Access to Real&nbsp;Python</p>
<p class="mb-1"><img class="w-75" src="https://cdn.realpython.com/static/videos/lesson-locked.f5105cfd26db.svg" width="510" height="260"></p>
<p class="mx-auto w-75 mb-3 small"><strong>Join us and get access to hundreds of tutorials, hands-on video courses, and a community of expert&nbsp;Pythonistas:</strong></p>
<p class="mb-0"><a href="/account/join/?utm_source=rp_article_footer&utm_content=python-pyqt-layout" class="btn btn-primary btn-sm px-4 mb-0">Level Up Your Python Skills »</a>
</div>
<div class="col-12 text-center d-none d-md-block">
<p class="h2 mb-2">Master <u><span class="marker-highlight">Real-World Python Skills</span></u><br>With Unlimited Access to Real&nbsp;Python</p>
<p class="mb-2"><img class="w-50 mb-2" src="https://cdn.realpython.com/static/videos/lesson-locked.f5105cfd26db.svg" width="510" height="260"></p>
<p class="mx-auto w-50 mb-3"><strong>Join us and get access to hundreds of tutorials, hands-on video courses, and a community of expert Pythonistas:</strong></p>
<p><a href="/account/join/?utm_source=rp_article_footer&utm_content=python-pyqt-layout" class="btn btn-primary btn-lg px-4">Level Up Your Python Skills »</a>
</div>
</div>
<div class="card mt-4" id="reader-comments">
<p class="card-header h3">What Do You Think?</p>
<div class="text-center mt-3 mb-0 p-0">
<span>
<a target="_blank" rel="nofollow" href="https://twitter.com/intent/tweet/?text=Check out this %23Python tutorial: PyQt%20Layouts%3A%20Create%20Professional-Looking%20GUI%20Applications by @realpython&url=https%3A//realpython.com/python-pyqt-layout/" class="mr-1 badge badge-twitter text-light mb-1"><i class="mr-1 fa fa-twitter text-light"></i>Tweet</a>
<a target="_blank" rel="nofollow" href="https://facebook.com/sharer/sharer.php?u=https%3A//realpython.com/python-pyqt-layout/" class="mr-1 badge badge-facebook text-light mb-1"><i class="mr-1 fa fa-facebook text-light"></i>Share</a>
<a target="_blank" rel="nofollow" href="mailto:?subject=Python article for you&body=Check out this Python tutorial:%0A%0APyQt%20Layouts%3A%20Create%20Professional-Looking%20GUI%20Applications%0A%0Ahttps%3A//realpython.com/python-pyqt-layout/" class="badge badge-red text-light mb-1"><i class="mr-1 fa fa-envelope text-light"></i>Email</a>
</span>
</div>
<div class="card-body">
<div class="alert alert-dark">
<p class="mb-0"><strong>Real Python Comment Policy:</strong> The most useful comments are those written with the goal of learning from or helping out other readers—after reading the whole article and all the earlier comments. Complaints and insults generally won’t make the cut here.</p>
</div>
<p>What’s your #1 takeaway or favorite thing you learned? How are you going to put your newfound skills to use? Leave a comment below and let us know.</p>
<div class="mb-4" id="disqus_thread">
</div>
</div>
</div>
<div class="card mt-4 mb-4">
<p class="card-header h3">Keep Learning</p>
<div class="card-body">
<p class="mb-0">Related Tutorial Categories:
<a href="/tutorials/gui/" class="badge badge-light text-muted">gui</a>
<a href="/tutorials/intermediate/" class="badge badge-light text-muted">intermediate</a>
</p>
<p class="mt-3 mb-0">Recommended Video Course: <a class="text-success" href="/courses/creating-pyqt-layouts-gui-applications/">Creating PyQt Layouts for GUI Applications</a></p>
</div>
</div>
<div class="modal fade" tabindex="-1" role="dialog" id="rprw">
<div class="modal-dialog modal-lg modal-dialog-centered" role="document">
<div class="modal-content">
<div class="modal-header border-0 mt-3">
<div class="col-12 modal-title text-center">
<h2 class="my-0 mx-5">Keep reading Real&nbsp;Python by creating a free account or signing&nbsp;in:</h2>
</div>
</div>
<div class="modal-body bg-light">
<div class="col-12 text-center">
<p class="mb-2 mt-3"><a href="/account/signup/?intent=continue_reading&utm_source=rp&utm_medium=web&utm_campaign=rwn&utm_content=v1&next=%2Fpython-pyqt-layout%2F"><img class="w-50 mb-2" src="https://cdn.realpython.com/static/videos/lesson-locked.f5105cfd26db.svg" width="510" height="260" alt="Keep reading"></a></p>
<p><a href="/account/signup/?intent=continue_reading&utm_source=rp&utm_medium=web&utm_campaign=rwn&utm_content=v1&next=%2Fpython-pyqt-layout%2F" class="btn btn-primary btn-lg px-5"></i>Continue »</a></a>
</div>
</div>
<div class="modal-footer border-0">
<p class="text-center text-muted mt-2 mb-1">Already have an account? <a href="/account/login/?next=/python-pyqt-layout/">Sign-In</a></p>
</div>
</div>
</div>
</div>
<script src="https://cdn.realpython.com/static/frontend/reader/rw.38bf29157dfe.js" async></script>
</div>
<aside class="col-md-7 col-lg-4">
<div class="card mb-3 bg-secondary">
<form class="card-body" action="/optins/process/" method="post">
<div class="form-group">
<p class="h5 text-muted text-center">— FREE Email Series —</p>
<p class="h3 text-center">🐍 Python Tricks 💌</p>
<p><img class="img-fluid rounded" src="https://cdn.realpython.com/static/pytrick-dict-merge.4201a0125a5e.png" width="738" height="490" alt="Python Tricks Dictionary Merge"></p>
</div>
<div class="form-group">
<input type="hidden" name="csrfmiddlewaretoken" value="CDgbsOgYhiA1qB7IS36e6LHeg0QPxlDYQYl0NExZ5qQNYf9xttTFxbKLsVcwhX3y">
<input type="hidden" name="slug" value="static-python-tricks-sidebar">
<input type="email" class="form-control form-control-md" name="email" placeholder="Email&hellip;" required>
</div>
<button type="submit" name="submit" class="btn btn-primary btn-md btn-block">Get Python Tricks »</button>
<p class="mb-0 mt-2 text-muted text-center">🔒 No spam. Unsubscribe any time.</p>
</form>
</div>
<div class="sidebar-module sidebar-module-inset border">
<p class="h4"><a class="link-unstyled" href="/tutorials/all/">All Tutorial Topics</a></p>
<a href="/tutorials/advanced/" class="badge badge-light text-muted">advanced</a>
<a href="/tutorials/api/" class="badge badge-light text-muted">api</a>
<a href="/tutorials/basics/" class="badge badge-light text-muted">basics</a>
<a href="/tutorials/best-practices/" class="badge badge-light text-muted">best-practices</a>
<a href="/tutorials/community/" class="badge badge-light text-muted">community</a>
<a href="/tutorials/databases/" class="badge badge-light text-muted">databases</a>
<a href="/tutorials/data-science/" class="badge badge-light text-muted">data-science</a>
<a href="/tutorials/devops/" class="badge badge-light text-muted">devops</a>
<a href="/tutorials/django/" class="badge badge-light text-muted">django</a>
<a href="/tutorials/docker/" class="badge badge-light text-muted">docker</a>
<a href="/tutorials/flask/" class="badge badge-light text-muted">flask</a>
<a href="/tutorials/front-end/" class="badge badge-light text-muted">front-end</a>
<a href="/tutorials/gamedev/" class="badge badge-light text-muted">gamedev</a>
<a href="/tutorials/gui/" class="badge badge-light text-muted">gui</a>
<a href="/tutorials/intermediate/" class="badge badge-light text-muted">intermediate</a>
<a href="/tutorials/machine-learning/" class="badge badge-light text-muted">machine-learning</a>
<a href="/tutorials/projects/" class="badge badge-light text-muted">projects</a>
<a href="/tutorials/python/" class="badge badge-light text-muted">python</a>
<a href="/tutorials/testing/" class="badge badge-light text-muted">testing</a>
<a href="/tutorials/tools/" class="badge badge-light text-muted">tools</a>
<a href="/tutorials/web-dev/" class="badge badge-light text-muted">web-dev</a>
<a href="/tutorials/web-scraping/" class="badge badge-light text-muted">web-scraping</a>
</div>
<div class="sidebar-module sidebar-module-inset p-0" style="overflow:hidden;">
<div style="display:block;position:relative;">
<div style="display:block;width:100%;padding-top:100%;"></div>
<div class="rpad" data-unit="1x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"></div>
</div>
</div>
<div class="sidebar-sticky ">
<div class="bg-light sidebar-module sidebar-module-inset" id="sidebar-toc">
<p class="h4 text-muted"><a class="link-unstyled" href="#toc">Table of Contents</a></p>
<div class="toc">
<ul>
<li><a href="#laying-out-graphical-elements-on-a-gui">Laying Out Graphical Elements on a GUI</a></li>
<li><a href="#getting-stocked-with-a-gallery-of-pyqt-layouts">Getting Stocked With a Gallery of PyQt Layouts</a></li>
<li><a href="#using-general-purpose-layout-managers">Using General-Purpose Layout Managers</a><ul>
<li><a href="#building-horizontal-layouts-qhboxlayout">Building Horizontal Layouts: QHBoxLayout</a></li>
<li><a href="#building-vertical-layouts-qvboxlayout">Building Vertical Layouts: QVBoxLayout</a></li>
<li><a href="#arranging-widgets-in-a-grid-qgridlayout">Arranging Widgets in a Grid: QGridLayout</a></li>
<li><a href="#creating-forms-quickly-qformlayout">Creating Forms Quickly: QFormLayout</a></li>
</ul>
</li>
<li><a href="#nesting-layouts-to-build-complex-guis">Nesting Layouts to Build Complex GUIs</a></li>
<li><a href="#using-multipage-layouts-and-widgets">Using Multipage Layouts and Widgets</a><ul>
<li><a href="#creating-a-stack-of-widgets">Creating a Stack of Widgets</a></li>
<li><a href="#using-pyqts-tab-widgets">Using PyQt&rsquo;s Tab Widgets</a></li>
</ul>
</li>
<li><a href="#laying-out-the-applications-main-window">Laying Out the Application&rsquo;s Main Window</a></li>
<li><a href="#laying-out-the-applications-dialogs">Laying Out the Application&rsquo;s Dialogs</a></li>
<li><a href="#managing-space-in-a-pyqt-layout">Managing Space in a PyQt Layout</a><ul>
<li><a href="#managing-space-in-box-layouts">Managing Space in Box Layouts</a></li>
<li><a href="#managing-space-in-grid-and-form-layouts">Managing Space in Grid and Form Layouts</a></li>
</ul>
</li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>
</div>
</div>
<div class="sidebar-module sidebar-module-inset text-center my-3 py-0">
<div class="jsCompletionStatusWidget btn-group mb-0">
<button title="Click to mark as completed" class="jsBtnCompletion btn btn-secondary border-right " style="border-top-right-radius: 0; border-bottom-right-radius: 0;" disabled>Mark as Completed</button>
<button title="Add bookmark" class="jsBtnBookmark btn btn-secondary border-left" disabled><i class="fa fa-fw fa-bookmark-o"></i></button>
</div>
</div>
<div class="sidebar-module sidebar-module-inset text-center my-3 py-0">
<span>
<a target="_blank" rel="nofollow" href="https://twitter.com/intent/tweet/?text=Check out this %23Python tutorial: PyQt%20Layouts%3A%20Create%20Professional-Looking%20GUI%20Applications by @realpython&url=https%3A//realpython.com/python-pyqt-layout/" class="mr-1 badge badge-twitter text-light mb-1"><i class="mr-1 fa fa-twitter text-light"></i>Tweet</a>
<a target="_blank" rel="nofollow" href="https://facebook.com/sharer/sharer.php?u=https%3A//realpython.com/python-pyqt-layout/" class="mr-1 badge badge-facebook text-light mb-1"><i class="mr-1 fa fa-facebook text-light"></i>Share</a>
<a target="_blank" rel="nofollow" href="mailto:?subject=Python article for you&body=Check out this Python tutorial:%0A%0APyQt%20Layouts%3A%20Create%20Professional-Looking%20GUI%20Applications%0A%0Ahttps%3A//realpython.com/python-pyqt-layout/" class="badge badge-red text-light mb-1"><i class="mr-1 fa fa-envelope text-light"></i>Email</a>
</span>
</div>
<div class="sidebar-module sidebar-module-inset border card">
<p><span class="badge badge-pill badge-success"><i class="fa fa-play-circle mr-1" aria-hidden="true"></i> Recommended Video Course</span><br><a class="stretched-link text-success" href="/courses/creating-pyqt-layouts-gui-applications/">Creating PyQt Layouts for GUI Applications</a></p>
</div>
<div class="sidebar-module sidebar-module-inset p-0" style="overflow:hidden;">
<div style="display:block;position:relative;">
<div style="display:block;width:100%;padding-top:25%;"></div>
<div class="rpad" data-unit="4x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"></div>
</div>
</div>
</div>
</aside>
</div>
</div>
<div class="modal fade" id="modal-python-mastery-course" tabindex="-1" role="dialog" aria-hidden="true">
<div class="modal-dialog modal-dialog-centered modal-lg" role="document">
<div class="modal-content">
<div class="modal-header bg-light pt-3 pb-2">
<div class="container-fluid">
<div class="row">
<div class="col-12">
<div class="progress" style="height: .5rem;">
<div class="progress-bar progress-bar-striped progress-bar-animated w-50" role="progressbar"></div>
</div>
</div>
<div class="col-12">
<p class="text-muted text-center mb-0 mt-2">Almost there! Complete this form and click the button below to gain instant access:</p>
</div>
</div>
</div>
<button type="button" class="close" data-dismiss="modal" aria-label="Close">
<span aria-hidden="true">&times;</span>
</button>
</div>
<div class="modal-body m-4">
<div class="container-fluid">
<div class="row align-items-center">
<div class="col-12 col-lg-4 mb-4">
<img class="img-fluid rounded" src="https://files.realpython.com/media/python-logo.8eb72ea6927b.png" width="1000" height="1000" srcset="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/python-logo.8eb72ea6927b.png&amp;w=250&amp;sig=3922247197a4a17add6954dd288123a4df30e55a 250w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/python-logo.8eb72ea6927b.png&amp;w=500&amp;sig=40c3b1b474ae94aec528188714ba5878a77362ea 500w, https://files.realpython.com/media/python-logo.8eb72ea6927b.png 1000w" sizes="50vw" alt="Python Logo">
</div>
<div class="col">
<p class="text-center h3 mb-4">5 Thoughts On Python Mastery</p>
<form class="col-12" action="/optins/process/" method="post">
<input type="hidden" name="csrfmiddlewaretoken" value="CDgbsOgYhiA1qB7IS36e6LHeg0QPxlDYQYl0NExZ5qQNYf9xttTFxbKLsVcwhX3y">
<input type="hidden" name="slug" value="python-mastery-course">
<div class="form-group">
<input type="email" name="email" class="form-control" placeholder="Email Address" required autofocus>
</div>
<button name="submit" type="submit" class="btn btn-primary btn-block text-wrap">Start the Class »</button>
</form>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<footer class="footer">
<div class="container">
<div class="w-75 mx-auto mt-4 mb-0">
<div style="display:block;position:relative;">
<div style="display:block;width:100%;padding-top:12.5%;"></div>
<div class="rpad rounded border" data-unit="8x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"></div>
</div>
<a class="small text-muted" href="/account/join/" rel="nofollow"> <i class="fa fa-info-circle" aria-hidden="true"> </i> Remove ads</a>
</div>
<p class="text-center text-muted w-75 mx-auto">© 2012–2022 Real Python&nbsp;⋅ <a href="/newsletter/">Newsletter</a>&nbsp;⋅ <a href="/podcasts/rpp/">Podcast</a>&nbsp;⋅ <a href="https://www.youtube.com/realpython">YouTube</a>&nbsp;⋅ <a href="https://twitter.com/realpython">Twitter</a>&nbsp;⋅ <a href="https://facebook.com/LearnRealPython">Facebook</a>&nbsp;⋅ <a href="https://www.instagram.com/realpython/">Instagram</a>&nbsp;⋅ <a href="/">Python&nbsp;Tutorials</a>&nbsp;⋅ <a href="/search">Search</a>&nbsp;⋅ <a href="/privacy-policy/">Privacy Policy</a>&nbsp;⋅ <a href="/energy-policy/" class="text-success active">Energy Policy</a>&nbsp;⋅ <a href="/sponsorships/">Advertise</a>&nbsp;⋅ <a href="/contact/">Contact</a><br>❤️ Happy Pythoning!</p>
</div>
</footer>
<script>
      (function(document, history, location) {
        var HISTORY_SUPPORT = !!(history && history.pushState);

        var anchorScrolls = {
          ANCHOR_REGEX: /^#[^ ]+$/,
          OFFSET_HEIGHT_PX: 120,

          /**
           * Establish events, and fix initial scroll position if a hash is provided.
           */
          init: function() {
            this.scrollToCurrent();
            window.addEventListener('hashchange', this.scrollToCurrent.bind(this));
            document.body.addEventListener('click', this.delegateAnchors.bind(this));
          },

          /**
           * Return the offset amount to deduct from the normal scroll position.
           * Modify as appropriate to allow for dynamic calculations
           */
          getFixedOffset: function() {
            return this.OFFSET_HEIGHT_PX;
          },

          /**
           * If the provided href is an anchor which resolves to an element on the
           * page, scroll to it.
           * @param  {String} href
           * @return {Boolean} - Was the href an anchor.
           */
          scrollIfAnchor: function(href, pushToHistory) {
            var match, rect, anchorOffset;

            if(!this.ANCHOR_REGEX.test(href)) {
              return false;
            }

            match = document.getElementById(href.slice(1));

            if(match) {
              rect = match.getBoundingClientRect();
              anchorOffset = window.pageYOffset + rect.top - this.getFixedOffset();
              window.scrollTo(window.pageXOffset, anchorOffset);

              // Add the state to history as-per normal anchor links
              if(HISTORY_SUPPORT && pushToHistory) {
                history.pushState({}, document.title, location.pathname + href);
              }
            }

            return !!match;
          },

          /**
           * Attempt to scroll to the current location's hash.
           */
          scrollToCurrent: function() {
            this.scrollIfAnchor(window.location.hash);
          },

          /**
           * If the click event's target was an anchor, fix the scroll position.
           */
          delegateAnchors: function(e) {
            var elem = e.target;

            // 
            if (elem.dataset.toggle === "tab") {
              return;
            }

            if(
              elem.nodeName === 'A' &&
              this.scrollIfAnchor(elem.getAttribute('href'), true)
            ) {
              e.preventDefault();
            }
          }
        };

        window.addEventListener(
          'DOMContentLoaded', anchorScrolls.init.bind(anchorScrolls)
        );
      })(window.document, window.history, window.location);
    </script>
<script>
      (function() {
        var isAndroid = navigator.userAgent.toLowerCase().indexOf("android") > -1;
        if (!isAndroid) {
          return;
        }

        var styles = `
        @font-face {
          font-family: 'DejaVu Sans Mono';
          font-weight: normal;
          font-style: normal;
          font-display: swap;
          src: url('https://cdn.realpython.com/static/mfonts/dejavu-sans-mono.33f00225f915.woff2') format('woff2'),
               url('https://cdn.realpython.com/static/mfonts/dejavu-sans-mono.0da77d3739f3.woff') format('woff'),
               url('https://cdn.realpython.com/static/mfonts/dejavu-sans-mono.c2356fc49835.ttf') format('truetype');
        }
        code, kbd, pre, samp {
          font-family: 'DejaVu Sans Mono', monospace;
        }
        `

        var styleSheet = document.createElement("style")
        styleSheet.type = "text/css"
        styleSheet.innerText = styles
        document.head.appendChild(styleSheet)
      })();
    </script>
<script src="https://cdn.realpython.com/static/jquery.min.8fb8fee4fcc3.js"></script>
<script src="https://cdn.realpython.com/static/popper.min.1022eaf388cc.js"></script>
<script src="https://cdn.realpython.com/static/bootstrap.min.f0c2bcf5ef0c.js"></script>
<script>
    (function() {
      document.querySelectorAll(".js-search-form-submit").forEach(function(el) {
        el.addEventListener("click", function(e) {
          e.preventDefault();
          e.currentTarget.parentElement.submit();
        })
      });
    })();
    </script>
<script src="https://cdn.realpython.com/static/frontend/reader/repl-toggle.925bef973b9c.js" async></script>
<script src="https://cdn.realpython.com/static/frontend/reader/lightbox.49cdac39212e.js" async></script>
<script src="https://cdn.realpython.com/static/frontend/reader/platforms-ui.b11202dc6079.js" async></script>
<script>window.rp_prop_id = '58946116052';</script>
<script src="https://srv.realpython.net/tag.js" async></script>
<script src="https://cdn.realpython.com/static/frontend/reader/toc-refresh.76a102c7d921.js" async></script>
<script id="js-context" type="application/json">{"is_completed": false, "is_bookmarked": false, "api_article_bookmark_url": "/api/v1/articles/python-pyqt-layout/bookmark/", "api_article_completion_status_url": "/api/v1/articles/python-pyqt-layout/completion_status/"}</script>
<script src="https://cdn.realpython.com/static/frontend/reader/completion-status.352d07abd84a.js" async></script>
<script id="dsq-count-scr" src="https://realpython.disqus.com/count.js" async></script>
<script>
      var disqus_config = function () {
        this.page.url = 'https://realpython.com/python-pyqt-layout/';
        this.page.identifier = 'https://realpython.com/python-pyqt-layout/';
        this.callbacks.onReady = [function() {
          if (window.onDisqusReady) {
            window.onDisqusReady();
          }
        }];
      };
      var disqus_script_url = 'https://realpython.disqus.com/embed.js';
    </script>
<script src="https://cdn.realpython.com/static/frontend/reader/lazy-disqus.07ee9079f4a3.js" defer></script>
<script src="https://cdn.onesignal.com/sdks/OneSignalSDK.js" async></script>
<script>
    var OneSignal = window.OneSignal || [];
    OneSignal.push(function() {
      OneSignal.init({
        appId: "c0081e20-a523-42bb-b0ac-04c5a9e8bf40"
      });
    });
  </script>
<script type="application/ld+json">
  {
    "@context": "http://schema.org",
    "@type": "Article",
    "headline": "PyQt Layouts: Create Professional\u002DLooking GUI Applications",
    
    "image": {
      "@type": "ImageObject",
      "url": "https://files.realpython.com/media/PyQt-Layout-Management_Watermarked.6403529c8a61.jpg",
      "width": 1920,
      "height": 1080
    },
    
    "mainEntityOfPage": {
      "@type": "WebPage",
      "@id": "https://realpython.com/python-pyqt-layout/"
    },
    "datePublished": "2020-11-25T14:00:00+00:00",
    "dateModified": "2021-01-26T19:05:42.343446+00:00",
     "publisher": {
      "@type": "Organization",
      "name": "Real Python",
      "logo": {
        "@type": "ImageObject",
        "url": "https://cdn.realpython.com/static/real-python-logo-square-tiny.b2452b6d3823.png",
        "width": 60,
        "height": 60
      }
    },
    "author": {
      "@type": "Organization",
      "name": "Real Python",
      "url": "https://realpython.com",
      "logo": "https://cdn.realpython.com/static/real-python-logo-square.146e987bf77c.png"
    },
    "description": "In this step\u002Dby\u002Dstep tutorial, you’ll learn how to use PyQt layouts to arrange and manage the graphical components on your GUI applications. With the help of PyQt\u0027s layout managers, you\u0027ll be able to create polished and professional GUIs with minimal effort."
  }
  </script>
<script>
  var _dcq = _dcq || [];
  var _dcs = _dcs || {};
  _dcs.account = '6214500';

  (function() {
    var dc = document.createElement('script');
    dc.type = 'text/javascript'; dc.async = true;
    dc.src = '//tag.getdrip.com/6214500.js';
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(dc, s);
  })();
</script>
<script>
  !function(f,b,e,v,n,t,s)
  {if(f.fbq)return;n=f.fbq=function(){n.callMethod?
  n.callMethod.apply(n,arguments):n.queue.push(arguments)};
  if(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';
  n.queue=[];t=b.createElement(e);t.async=!0;
  t.src=v;s=b.getElementsByTagName(e)[0];
  s.parentNode.insertBefore(t,s)}(window, document,'script',
  'https://connect.facebook.net/en_US/fbevents.js');
  fbq('init', '2220911568135371');
  fbq('track', 'PageView');
</script>
<noscript><img height="1" width="1" style="display:none"
  src="https://www.facebook.com/tr?id=2220911568135371&ev=PageView&noscript=1"
/></noscript>
</body>
</html>
